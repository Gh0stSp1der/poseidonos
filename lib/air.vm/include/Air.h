// generated by config module

#ifndef AIR_H
#define AIR_H

#include <stdint.h>
#include <stdbool.h>

#include "src/lib/CType.h"

enum AIR_NODE
{
    PERF_VOLUME,
    LAT_BDEV_READ,
    LAT_BDEV_WRITE,
    PERF_METAFS_IO,
    Q_AIO,
    Q_NVRAM,
    Q_SSD,
    Q_EVENT,
    Q_IO,
    PERF_COPY,
};

#ifdef __cplusplus
extern "C" {
#endif

#define AIRLOG(NID, AID, VAL1, VAL2) \
    switch(NID) { \
    case PERF_VOLUME: AIR_PERF_VOLUME(AID, VAL1, VAL2); break; \
    case LAT_BDEV_READ: AIR_LAT_BDEV_READ(AID, VAL1, VAL2); break; \
    case LAT_BDEV_WRITE: AIR_LAT_BDEV_WRITE(AID, VAL1, VAL2); break; \
    case PERF_METAFS_IO: AIR_PERF_METAFS_IO(AID, VAL1, VAL2); break; \
    case Q_AIO: AIR_Q_AIO(AID, VAL1, VAL2); break; \
    case Q_NVRAM: AIR_Q_NVRAM(AID, VAL1, VAL2); break; \
    case Q_SSD: AIR_Q_SSD(AID, VAL1, VAL2); break; \
    case Q_EVENT: AIR_Q_EVENT(AID, VAL1, VAL2); break; \
    case Q_IO: AIR_Q_IO(AID, VAL1, VAL2); break; \
    case PERF_COPY: AIR_PERF_COPY(AID, VAL1, VAL2); break; \
    default: AIR_DONOTHING(); break; \
    }

void AIR_INITIALIZE(uint32_t cpu_num);
void AIR_ACTIVATE(void);
void AIR_DEACTIVATE(void);
void AIR_FINALIZE(void);

void AIR_PERF_VOLUME(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_LAT_BDEV_READ(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_LAT_BDEV_WRITE(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_PERF_METAFS_IO(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_Q_AIO(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_Q_NVRAM(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_Q_SSD(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_Q_EVENT(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_Q_IO(uint64_t aid, uint64_t value1, uint64_t value2);
void AIR_PERF_COPY(uint64_t aid, uint64_t value1, uint64_t value2);

void AIR_DONOTHING(void);

#ifdef __cplusplus
}
#endif

#endif // AIR_H