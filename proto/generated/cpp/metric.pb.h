// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metric_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metric_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_metric_2eproto_metadata_getter(int index);
class HistogramData;
struct HistogramDataDefaultTypeInternal;
extern HistogramDataDefaultTypeInternal _HistogramData_default_instance_;
class HistogramData_HistogramBucket;
struct HistogramData_HistogramBucketDefaultTypeInternal;
extern HistogramData_HistogramBucketDefaultTypeInternal _HistogramData_HistogramBucket_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricCollectRequest;
struct MetricCollectRequestDefaultTypeInternal;
extern MetricCollectRequestDefaultTypeInternal _MetricCollectRequest_default_instance_;
class MetricCollectResponse;
struct MetricCollectResponseDefaultTypeInternal;
extern MetricCollectResponseDefaultTypeInternal _MetricCollectResponse_default_instance_;
class MetricPublishRequest;
struct MetricPublishRequestDefaultTypeInternal;
extern MetricPublishRequestDefaultTypeInternal _MetricPublishRequest_default_instance_;
class MetricPublishResponse;
struct MetricPublishResponseDefaultTypeInternal;
extern MetricPublishResponseDefaultTypeInternal _MetricPublishResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HistogramData* Arena::CreateMaybeMessage<::HistogramData>(Arena*);
template<> ::HistogramData_HistogramBucket* Arena::CreateMaybeMessage<::HistogramData_HistogramBucket>(Arena*);
template<> ::Label* Arena::CreateMaybeMessage<::Label>(Arena*);
template<> ::Metric* Arena::CreateMaybeMessage<::Metric>(Arena*);
template<> ::MetricCollectRequest* Arena::CreateMaybeMessage<::MetricCollectRequest>(Arena*);
template<> ::MetricCollectResponse* Arena::CreateMaybeMessage<::MetricCollectResponse>(Arena*);
template<> ::MetricPublishRequest* Arena::CreateMaybeMessage<::MetricPublishRequest>(Arena*);
template<> ::MetricPublishResponse* Arena::CreateMaybeMessage<::MetricPublishResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MetricTypes : int {
  COUNTER = 0,
  GUAGE = 1,
  HISTOGRAM = 2,
  MetricTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetricTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetricTypes_IsValid(int value);
constexpr MetricTypes MetricTypes_MIN = COUNTER;
constexpr MetricTypes MetricTypes_MAX = HISTOGRAM;
constexpr int MetricTypes_ARRAYSIZE = MetricTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricTypes_descriptor();
template<typename T>
inline const std::string& MetricTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricTypes_descriptor(), enum_t_value);
}
inline bool MetricTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MetricTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricTypes>(
    MetricTypes_descriptor(), name, value);
}
// ===================================================================

class MetricPublishRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetricPublishRequest) */ {
 public:
  inline MetricPublishRequest() : MetricPublishRequest(nullptr) {}
  virtual ~MetricPublishRequest();
  explicit constexpr MetricPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricPublishRequest(const MetricPublishRequest& from);
  MetricPublishRequest(MetricPublishRequest&& from) noexcept
    : MetricPublishRequest() {
    *this = ::std::move(from);
  }

  inline MetricPublishRequest& operator=(const MetricPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricPublishRequest& operator=(MetricPublishRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricPublishRequest* internal_default_instance() {
    return reinterpret_cast<const MetricPublishRequest*>(
               &_MetricPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricPublishRequest& a, MetricPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricPublishRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricPublishRequest* New() const final {
    return CreateMaybeMessage<MetricPublishRequest>(nullptr);
  }

  MetricPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricPublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricPublishRequest& from);
  void MergeFrom(const MetricPublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricPublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetricPublishRequest";
  }
  protected:
  explicit MetricPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >*
      mutable_metrics();
  private:
  const ::Metric& _internal_metrics(int index) const;
  ::Metric* _internal_add_metrics();
  public:
  const ::Metric& metrics(int index) const;
  ::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:MetricPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class MetricPublishResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetricPublishResponse) */ {
 public:
  inline MetricPublishResponse() : MetricPublishResponse(nullptr) {}
  virtual ~MetricPublishResponse();
  explicit constexpr MetricPublishResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricPublishResponse(const MetricPublishResponse& from);
  MetricPublishResponse(MetricPublishResponse&& from) noexcept
    : MetricPublishResponse() {
    *this = ::std::move(from);
  }

  inline MetricPublishResponse& operator=(const MetricPublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricPublishResponse& operator=(MetricPublishResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricPublishResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricPublishResponse* internal_default_instance() {
    return reinterpret_cast<const MetricPublishResponse*>(
               &_MetricPublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetricPublishResponse& a, MetricPublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricPublishResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricPublishResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricPublishResponse* New() const final {
    return CreateMaybeMessage<MetricPublishResponse>(nullptr);
  }

  MetricPublishResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricPublishResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricPublishResponse& from);
  void MergeFrom(const MetricPublishResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricPublishResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetricPublishResponse";
  }
  protected:
  explicit MetricPublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalReceivedMetricsFieldNumber = 1,
  };
  // int64 totalReceivedMetrics = 1;
  void clear_totalreceivedmetrics();
  ::PROTOBUF_NAMESPACE_ID::int64 totalreceivedmetrics() const;
  void set_totalreceivedmetrics(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_totalreceivedmetrics() const;
  void _internal_set_totalreceivedmetrics(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MetricPublishResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalreceivedmetrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class MetricCollectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetricCollectRequest) */ {
 public:
  inline MetricCollectRequest() : MetricCollectRequest(nullptr) {}
  virtual ~MetricCollectRequest();
  explicit constexpr MetricCollectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricCollectRequest(const MetricCollectRequest& from);
  MetricCollectRequest(MetricCollectRequest&& from) noexcept
    : MetricCollectRequest() {
    *this = ::std::move(from);
  }

  inline MetricCollectRequest& operator=(const MetricCollectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricCollectRequest& operator=(MetricCollectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricCollectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricCollectRequest* internal_default_instance() {
    return reinterpret_cast<const MetricCollectRequest*>(
               &_MetricCollectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MetricCollectRequest& a, MetricCollectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricCollectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricCollectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricCollectRequest* New() const final {
    return CreateMaybeMessage<MetricCollectRequest>(nullptr);
  }

  MetricCollectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricCollectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricCollectRequest& from);
  void MergeFrom(const MetricCollectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricCollectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetricCollectRequest";
  }
  protected:
  explicit MetricCollectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MetricCollectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class MetricCollectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetricCollectResponse) */ {
 public:
  inline MetricCollectResponse() : MetricCollectResponse(nullptr) {}
  virtual ~MetricCollectResponse();
  explicit constexpr MetricCollectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricCollectResponse(const MetricCollectResponse& from);
  MetricCollectResponse(MetricCollectResponse&& from) noexcept
    : MetricCollectResponse() {
    *this = ::std::move(from);
  }

  inline MetricCollectResponse& operator=(const MetricCollectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricCollectResponse& operator=(MetricCollectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricCollectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricCollectResponse* internal_default_instance() {
    return reinterpret_cast<const MetricCollectResponse*>(
               &_MetricCollectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MetricCollectResponse& a, MetricCollectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricCollectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricCollectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricCollectResponse* New() const final {
    return CreateMaybeMessage<MetricCollectResponse>(nullptr);
  }

  MetricCollectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricCollectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricCollectResponse& from);
  void MergeFrom(const MetricCollectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricCollectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetricCollectResponse";
  }
  protected:
  explicit MetricCollectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >*
      mutable_metrics();
  private:
  const ::Metric& _internal_metrics(int index) const;
  ::Metric* _internal_add_metrics();
  public:
  const ::Metric& metrics(int index) const;
  ::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:MetricCollectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();
  explicit constexpr Metric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kHistogramValue = 4,
    kCounterValue = 5,
    kGuageValue = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 7,
    kNameFieldNumber = 3,
    kTimeFieldNumber = 2,
    kTypeFieldNumber = 1,
    kHistogramValueFieldNumber = 4,
    kCounterValueFieldNumber = 5,
    kGuageValueFieldNumber = 6,
  };
  // repeated .Label labels = 7;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Label >*
      mutable_labels();
  private:
  const ::Label& _internal_labels(int index) const;
  ::Label* _internal_add_labels();
  public:
  const ::Label& labels(int index) const;
  ::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Label >&
      labels() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .MetricTypes type = 1;
  void clear_type();
  ::MetricTypes type() const;
  void set_type(::MetricTypes value);
  private:
  ::MetricTypes _internal_type() const;
  void _internal_set_type(::MetricTypes value);
  public:

  // .HistogramData histogramValue = 4;
  bool has_histogramvalue() const;
  private:
  bool _internal_has_histogramvalue() const;
  public:
  void clear_histogramvalue();
  const ::HistogramData& histogramvalue() const;
  ::HistogramData* release_histogramvalue();
  ::HistogramData* mutable_histogramvalue();
  void set_allocated_histogramvalue(::HistogramData* histogramvalue);
  private:
  const ::HistogramData& _internal_histogramvalue() const;
  ::HistogramData* _internal_mutable_histogramvalue();
  public:
  void unsafe_arena_set_allocated_histogramvalue(
      ::HistogramData* histogramvalue);
  ::HistogramData* unsafe_arena_release_histogramvalue();

  // uint64 counterValue = 5;
  bool has_countervalue() const;
  private:
  bool _internal_has_countervalue() const;
  public:
  void clear_countervalue();
  ::PROTOBUF_NAMESPACE_ID::uint64 countervalue() const;
  void set_countervalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_countervalue() const;
  void _internal_set_countervalue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 guageValue = 6;
  bool has_guagevalue() const;
  private:
  bool _internal_has_guagevalue() const;
  public:
  void clear_guagevalue();
  ::PROTOBUF_NAMESPACE_ID::int64 guagevalue() const;
  void set_guagevalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_guagevalue() const;
  void _internal_set_guagevalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Metric)
 private:
  class _Internal;
  void set_has_histogramvalue();
  void set_has_countervalue();
  void set_has_guagevalue();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  int type_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::HistogramData* histogramvalue_;
    ::PROTOBUF_NAMESPACE_ID::uint64 countervalue_;
    ::PROTOBUF_NAMESPACE_ID::int64 guagevalue_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class Label PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  virtual ~Label();
  explicit constexpr Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class HistogramData_HistogramBucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HistogramData.HistogramBucket) */ {
 public:
  inline HistogramData_HistogramBucket() : HistogramData_HistogramBucket(nullptr) {}
  virtual ~HistogramData_HistogramBucket();
  explicit constexpr HistogramData_HistogramBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistogramData_HistogramBucket(const HistogramData_HistogramBucket& from);
  HistogramData_HistogramBucket(HistogramData_HistogramBucket&& from) noexcept
    : HistogramData_HistogramBucket() {
    *this = ::std::move(from);
  }

  inline HistogramData_HistogramBucket& operator=(const HistogramData_HistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramData_HistogramBucket& operator=(HistogramData_HistogramBucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramData_HistogramBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramData_HistogramBucket* internal_default_instance() {
    return reinterpret_cast<const HistogramData_HistogramBucket*>(
               &_HistogramData_HistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HistogramData_HistogramBucket& a, HistogramData_HistogramBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramData_HistogramBucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramData_HistogramBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramData_HistogramBucket* New() const final {
    return CreateMaybeMessage<HistogramData_HistogramBucket>(nullptr);
  }

  HistogramData_HistogramBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramData_HistogramBucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramData_HistogramBucket& from);
  void MergeFrom(const HistogramData_HistogramBucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramData_HistogramBucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HistogramData.HistogramBucket";
  }
  protected:
  explicit HistogramData_HistogramBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string le = 1;
  void clear_le();
  const std::string& le() const;
  void set_le(const std::string& value);
  void set_le(std::string&& value);
  void set_le(const char* value);
  void set_le(const char* value, size_t size);
  std::string* mutable_le();
  std::string* release_le();
  void set_allocated_le(std::string* le);
  private:
  const std::string& _internal_le() const;
  void _internal_set_le(const std::string& value);
  std::string* _internal_mutable_le();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:HistogramData.HistogramBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr le_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// -------------------------------------------------------------------

class HistogramData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HistogramData) */ {
 public:
  inline HistogramData() : HistogramData(nullptr) {}
  virtual ~HistogramData();
  explicit constexpr HistogramData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistogramData(const HistogramData& from);
  HistogramData(HistogramData&& from) noexcept
    : HistogramData() {
    *this = ::std::move(from);
  }

  inline HistogramData& operator=(const HistogramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramData& operator=(HistogramData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramData* internal_default_instance() {
    return reinterpret_cast<const HistogramData*>(
               &_HistogramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HistogramData& a, HistogramData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramData* New() const final {
    return CreateMaybeMessage<HistogramData>(nullptr);
  }

  HistogramData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramData& from);
  void MergeFrom(const HistogramData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HistogramData";
  }
  protected:
  explicit HistogramData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_metric_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef HistogramData_HistogramBucket HistogramBucket;

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 2,
    kSumFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // repeated .HistogramData.HistogramBucket buckets = 2;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::HistogramData_HistogramBucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramData_HistogramBucket >*
      mutable_buckets();
  private:
  const ::HistogramData_HistogramBucket& _internal_buckets(int index) const;
  ::HistogramData_HistogramBucket* _internal_add_buckets();
  public:
  const ::HistogramData_HistogramBucket& buckets(int index) const;
  ::HistogramData_HistogramBucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramData_HistogramBucket >&
      buckets() const;

  // int64 sum = 3;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int64 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:HistogramData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramData_HistogramBucket > buckets_;
  ::PROTOBUF_NAMESPACE_ID::int64 sum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricPublishRequest

// repeated .Metric metrics = 1;
inline int MetricPublishRequest::_internal_metrics_size() const {
  return metrics_.size();
}
inline int MetricPublishRequest::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricPublishRequest::clear_metrics() {
  metrics_.Clear();
}
inline ::Metric* MetricPublishRequest::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:MetricPublishRequest.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >*
MetricPublishRequest::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:MetricPublishRequest.metrics)
  return &metrics_;
}
inline const ::Metric& MetricPublishRequest::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::Metric& MetricPublishRequest::metrics(int index) const {
  // @@protoc_insertion_point(field_get:MetricPublishRequest.metrics)
  return _internal_metrics(index);
}
inline ::Metric* MetricPublishRequest::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::Metric* MetricPublishRequest::add_metrics() {
  // @@protoc_insertion_point(field_add:MetricPublishRequest.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >&
MetricPublishRequest::metrics() const {
  // @@protoc_insertion_point(field_list:MetricPublishRequest.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// MetricPublishResponse

// int64 totalReceivedMetrics = 1;
inline void MetricPublishResponse::clear_totalreceivedmetrics() {
  totalreceivedmetrics_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricPublishResponse::_internal_totalreceivedmetrics() const {
  return totalreceivedmetrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricPublishResponse::totalreceivedmetrics() const {
  // @@protoc_insertion_point(field_get:MetricPublishResponse.totalReceivedMetrics)
  return _internal_totalreceivedmetrics();
}
inline void MetricPublishResponse::_internal_set_totalreceivedmetrics(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalreceivedmetrics_ = value;
}
inline void MetricPublishResponse::set_totalreceivedmetrics(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_totalreceivedmetrics(value);
  // @@protoc_insertion_point(field_set:MetricPublishResponse.totalReceivedMetrics)
}

// -------------------------------------------------------------------

// MetricCollectRequest

// -------------------------------------------------------------------

// MetricCollectResponse

// repeated .Metric metrics = 1;
inline int MetricCollectResponse::_internal_metrics_size() const {
  return metrics_.size();
}
inline int MetricCollectResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricCollectResponse::clear_metrics() {
  metrics_.Clear();
}
inline ::Metric* MetricCollectResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:MetricCollectResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >*
MetricCollectResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:MetricCollectResponse.metrics)
  return &metrics_;
}
inline const ::Metric& MetricCollectResponse::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::Metric& MetricCollectResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:MetricCollectResponse.metrics)
  return _internal_metrics(index);
}
inline ::Metric* MetricCollectResponse::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::Metric* MetricCollectResponse::add_metrics() {
  // @@protoc_insertion_point(field_add:MetricCollectResponse.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Metric >&
MetricCollectResponse::metrics() const {
  // @@protoc_insertion_point(field_list:MetricCollectResponse.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// Metric

// .MetricTypes type = 1;
inline void Metric::clear_type() {
  type_ = 0;
}
inline ::MetricTypes Metric::_internal_type() const {
  return static_cast< ::MetricTypes >(type_);
}
inline ::MetricTypes Metric::type() const {
  // @@protoc_insertion_point(field_get:Metric.type)
  return _internal_type();
}
inline void Metric::_internal_set_type(::MetricTypes value) {
  
  type_ = value;
}
inline void Metric::set_type(::MetricTypes value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Metric.type)
}

// .google.protobuf.Timestamp time = 2;
inline bool Metric::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Metric::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metric::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Metric::time() const {
  // @@protoc_insertion_point(field_get:Metric.time)
  return _internal_time();
}
inline void Metric::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Metric.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metric::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metric::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:Metric.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metric::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Metric::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Metric.time)
  return _internal_mutable_time();
}
inline void Metric::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Metric.time)
}

// string name = 3;
inline void Metric::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:Metric.name)
  return _internal_name();
}
inline void Metric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Metric.name)
}
inline std::string* Metric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Metric.name)
  return _internal_mutable_name();
}
inline const std::string& Metric::_internal_name() const {
  return name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Metric.name)
}
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Metric.name)
}
inline void Metric::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Metric.name)
}
inline std::string* Metric::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:Metric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Metric.name)
}

// .HistogramData histogramValue = 4;
inline bool Metric::_internal_has_histogramvalue() const {
  return value_case() == kHistogramValue;
}
inline bool Metric::has_histogramvalue() const {
  return _internal_has_histogramvalue();
}
inline void Metric::set_has_histogramvalue() {
  _oneof_case_[0] = kHistogramValue;
}
inline void Metric::clear_histogramvalue() {
  if (_internal_has_histogramvalue()) {
    if (GetArena() == nullptr) {
      delete value_.histogramvalue_;
    }
    clear_has_value();
  }
}
inline ::HistogramData* Metric::release_histogramvalue() {
  // @@protoc_insertion_point(field_release:Metric.histogramValue)
  if (_internal_has_histogramvalue()) {
    clear_has_value();
      ::HistogramData* temp = value_.histogramvalue_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.histogramvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::HistogramData& Metric::_internal_histogramvalue() const {
  return _internal_has_histogramvalue()
      ? *value_.histogramvalue_
      : reinterpret_cast< ::HistogramData&>(::_HistogramData_default_instance_);
}
inline const ::HistogramData& Metric::histogramvalue() const {
  // @@protoc_insertion_point(field_get:Metric.histogramValue)
  return _internal_histogramvalue();
}
inline ::HistogramData* Metric::unsafe_arena_release_histogramvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Metric.histogramValue)
  if (_internal_has_histogramvalue()) {
    clear_has_value();
    ::HistogramData* temp = value_.histogramvalue_;
    value_.histogramvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_histogramvalue(::HistogramData* histogramvalue) {
  clear_value();
  if (histogramvalue) {
    set_has_histogramvalue();
    value_.histogramvalue_ = histogramvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Metric.histogramValue)
}
inline ::HistogramData* Metric::_internal_mutable_histogramvalue() {
  if (!_internal_has_histogramvalue()) {
    clear_value();
    set_has_histogramvalue();
    value_.histogramvalue_ = CreateMaybeMessage< ::HistogramData >(GetArena());
  }
  return value_.histogramvalue_;
}
inline ::HistogramData* Metric::mutable_histogramvalue() {
  // @@protoc_insertion_point(field_mutable:Metric.histogramValue)
  return _internal_mutable_histogramvalue();
}

// uint64 counterValue = 5;
inline bool Metric::_internal_has_countervalue() const {
  return value_case() == kCounterValue;
}
inline bool Metric::has_countervalue() const {
  return _internal_has_countervalue();
}
inline void Metric::set_has_countervalue() {
  _oneof_case_[0] = kCounterValue;
}
inline void Metric::clear_countervalue() {
  if (_internal_has_countervalue()) {
    value_.countervalue_ = PROTOBUF_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::_internal_countervalue() const {
  if (_internal_has_countervalue()) {
    return value_.countervalue_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Metric::_internal_set_countervalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_countervalue()) {
    clear_value();
    set_has_countervalue();
  }
  value_.countervalue_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::countervalue() const {
  // @@protoc_insertion_point(field_get:Metric.counterValue)
  return _internal_countervalue();
}
inline void Metric::set_countervalue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_countervalue(value);
  // @@protoc_insertion_point(field_set:Metric.counterValue)
}

// int64 guageValue = 6;
inline bool Metric::_internal_has_guagevalue() const {
  return value_case() == kGuageValue;
}
inline bool Metric::has_guagevalue() const {
  return _internal_has_guagevalue();
}
inline void Metric::set_has_guagevalue() {
  _oneof_case_[0] = kGuageValue;
}
inline void Metric::clear_guagevalue() {
  if (_internal_has_guagevalue()) {
    value_.guagevalue_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metric::_internal_guagevalue() const {
  if (_internal_has_guagevalue()) {
    return value_.guagevalue_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Metric::_internal_set_guagevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_guagevalue()) {
    clear_value();
    set_has_guagevalue();
  }
  value_.guagevalue_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metric::guagevalue() const {
  // @@protoc_insertion_point(field_get:Metric.guageValue)
  return _internal_guagevalue();
}
inline void Metric::set_guagevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_guagevalue(value);
  // @@protoc_insertion_point(field_set:Metric.guageValue)
}

// repeated .Label labels = 7;
inline int Metric::_internal_labels_size() const {
  return labels_.size();
}
inline int Metric::labels_size() const {
  return _internal_labels_size();
}
inline void Metric::clear_labels() {
  labels_.Clear();
}
inline ::Label* Metric::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Metric.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Label >*
Metric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Metric.labels)
  return &labels_;
}
inline const ::Label& Metric::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::Label& Metric::labels(int index) const {
  // @@protoc_insertion_point(field_get:Metric.labels)
  return _internal_labels(index);
}
inline ::Label* Metric::_internal_add_labels() {
  return labels_.Add();
}
inline ::Label* Metric::add_labels() {
  // @@protoc_insertion_point(field_add:Metric.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Label >&
Metric::labels() const {
  // @@protoc_insertion_point(field_list:Metric.labels)
  return labels_;
}

inline bool Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Metric::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Metric::ValueCase Metric::value_case() const {
  return Metric::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Label

// string label = 1;
inline void Label::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Label::label() const {
  // @@protoc_insertion_point(field_get:Label.label)
  return _internal_label();
}
inline void Label::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Label.label)
}
inline std::string* Label::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Label.label)
  return _internal_mutable_label();
}
inline const std::string& Label::_internal_label() const {
  return label_.Get();
}
inline void Label::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Label::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Label.label)
}
inline void Label::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Label.label)
}
inline void Label::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Label.label)
}
inline std::string* Label::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Label::release_label() {
  // @@protoc_insertion_point(field_release:Label.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Label.label)
}

// string value = 2;
inline void Label::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Label::value() const {
  // @@protoc_insertion_point(field_get:Label.value)
  return _internal_value();
}
inline void Label::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Label.value)
}
inline std::string* Label::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Label.value)
  return _internal_mutable_value();
}
inline const std::string& Label::_internal_value() const {
  return value_.Get();
}
inline void Label::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Label::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Label.value)
}
inline void Label::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Label.value)
}
inline void Label::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Label.value)
}
inline std::string* Label::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Label::release_value() {
  // @@protoc_insertion_point(field_release:Label.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Label.value)
}

// -------------------------------------------------------------------

// HistogramData_HistogramBucket

// string le = 1;
inline void HistogramData_HistogramBucket::clear_le() {
  le_.ClearToEmpty();
}
inline const std::string& HistogramData_HistogramBucket::le() const {
  // @@protoc_insertion_point(field_get:HistogramData.HistogramBucket.le)
  return _internal_le();
}
inline void HistogramData_HistogramBucket::set_le(const std::string& value) {
  _internal_set_le(value);
  // @@protoc_insertion_point(field_set:HistogramData.HistogramBucket.le)
}
inline std::string* HistogramData_HistogramBucket::mutable_le() {
  // @@protoc_insertion_point(field_mutable:HistogramData.HistogramBucket.le)
  return _internal_mutable_le();
}
inline const std::string& HistogramData_HistogramBucket::_internal_le() const {
  return le_.Get();
}
inline void HistogramData_HistogramBucket::_internal_set_le(const std::string& value) {
  
  le_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistogramData_HistogramBucket::set_le(std::string&& value) {
  
  le_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HistogramData.HistogramBucket.le)
}
inline void HistogramData_HistogramBucket::set_le(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  le_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HistogramData.HistogramBucket.le)
}
inline void HistogramData_HistogramBucket::set_le(const char* value,
    size_t size) {
  
  le_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HistogramData.HistogramBucket.le)
}
inline std::string* HistogramData_HistogramBucket::_internal_mutable_le() {
  
  return le_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistogramData_HistogramBucket::release_le() {
  // @@protoc_insertion_point(field_release:HistogramData.HistogramBucket.le)
  return le_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistogramData_HistogramBucket::set_allocated_le(std::string* le) {
  if (le != nullptr) {
    
  } else {
    
  }
  le_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), le,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HistogramData.HistogramBucket.le)
}

// uint64 value = 2;
inline void HistogramData_HistogramBucket::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramData_HistogramBucket::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramData_HistogramBucket::value() const {
  // @@protoc_insertion_point(field_get:HistogramData.HistogramBucket.value)
  return _internal_value();
}
inline void HistogramData_HistogramBucket::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void HistogramData_HistogramBucket::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:HistogramData.HistogramBucket.value)
}

// -------------------------------------------------------------------

// HistogramData

// repeated .HistogramData.HistogramBucket buckets = 2;
inline int HistogramData::_internal_buckets_size() const {
  return buckets_.size();
}
inline int HistogramData::buckets_size() const {
  return _internal_buckets_size();
}
inline void HistogramData::clear_buckets() {
  buckets_.Clear();
}
inline ::HistogramData_HistogramBucket* HistogramData::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:HistogramData.buckets)
  return buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramData_HistogramBucket >*
HistogramData::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:HistogramData.buckets)
  return &buckets_;
}
inline const ::HistogramData_HistogramBucket& HistogramData::_internal_buckets(int index) const {
  return buckets_.Get(index);
}
inline const ::HistogramData_HistogramBucket& HistogramData::buckets(int index) const {
  // @@protoc_insertion_point(field_get:HistogramData.buckets)
  return _internal_buckets(index);
}
inline ::HistogramData_HistogramBucket* HistogramData::_internal_add_buckets() {
  return buckets_.Add();
}
inline ::HistogramData_HistogramBucket* HistogramData::add_buckets() {
  // @@protoc_insertion_point(field_add:HistogramData.buckets)
  return _internal_add_buckets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramData_HistogramBucket >&
HistogramData::buckets() const {
  // @@protoc_insertion_point(field_list:HistogramData.buckets)
  return buckets_;
}

// int64 sum = 3;
inline void HistogramData::clear_sum() {
  sum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramData::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramData::sum() const {
  // @@protoc_insertion_point(field_get:HistogramData.sum)
  return _internal_sum();
}
inline void HistogramData::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sum_ = value;
}
inline void HistogramData::set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:HistogramData.sum)
}

// uint64 count = 4;
inline void HistogramData::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramData::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramData::count() const {
  // @@protoc_insertion_point(field_get:HistogramData.count)
  return _internal_count();
}
inline void HistogramData::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void HistogramData::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:HistogramData.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MetricTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MetricTypes>() {
  return ::MetricTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metric_2eproto
