// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric.proto

#include "metric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MetricPublishRequest::MetricPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_(){}
struct MetricPublishRequestDefaultTypeInternal {
  constexpr MetricPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricPublishRequestDefaultTypeInternal() {}
  union {
    MetricPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricPublishRequestDefaultTypeInternal _MetricPublishRequest_default_instance_;
constexpr MetricPublishResponse::MetricPublishResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : totalreceivedmetrics_(PROTOBUF_LONGLONG(0)){}
struct MetricPublishResponseDefaultTypeInternal {
  constexpr MetricPublishResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricPublishResponseDefaultTypeInternal() {}
  union {
    MetricPublishResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricPublishResponseDefaultTypeInternal _MetricPublishResponse_default_instance_;
constexpr MetricCollectRequest::MetricCollectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MetricCollectRequestDefaultTypeInternal {
  constexpr MetricCollectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricCollectRequestDefaultTypeInternal() {}
  union {
    MetricCollectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricCollectRequestDefaultTypeInternal _MetricCollectRequest_default_instance_;
constexpr MetricCollectResponse::MetricCollectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_(){}
struct MetricCollectResponseDefaultTypeInternal {
  constexpr MetricCollectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricCollectResponseDefaultTypeInternal() {}
  union {
    MetricCollectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricCollectResponseDefaultTypeInternal _MetricCollectResponse_default_instance_;
constexpr Metric::Metric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(nullptr)
  , value_(nullptr)
  , type_(0)
{}
struct MetricDefaultTypeInternal {
  constexpr MetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricDefaultTypeInternal _Metric_default_instance_;
constexpr MetricData::MetricData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : histogramdata_(nullptr)
  , counterdata_(PROTOBUF_ULONGLONG(0))
  , guagedata_(PROTOBUF_LONGLONG(0)){}
struct MetricDataDefaultTypeInternal {
  constexpr MetricDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricDataDefaultTypeInternal() {}
  union {
    MetricData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricDataDefaultTypeInternal _MetricData_default_instance_;
constexpr HistogramData_HistogramBucket::HistogramData_HistogramBucket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : le_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(PROTOBUF_ULONGLONG(0)){}
struct HistogramData_HistogramBucketDefaultTypeInternal {
  constexpr HistogramData_HistogramBucketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HistogramData_HistogramBucketDefaultTypeInternal() {}
  union {
    HistogramData_HistogramBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HistogramData_HistogramBucketDefaultTypeInternal _HistogramData_HistogramBucket_default_instance_;
constexpr HistogramData::HistogramData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buckets_()
  , sum_(PROTOBUF_LONGLONG(0))
  , count_(PROTOBUF_ULONGLONG(0)){}
struct HistogramDataDefaultTypeInternal {
  constexpr HistogramDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HistogramDataDefaultTypeInternal() {}
  union {
    HistogramData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HistogramDataDefaultTypeInternal _HistogramData_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metric_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_metric_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metric_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metric_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetricPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricPublishRequest, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetricPublishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricPublishResponse, totalreceivedmetrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetricCollectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetricCollectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricCollectResponse, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Metric, type_),
  PROTOBUF_FIELD_OFFSET(::Metric, time_),
  PROTOBUF_FIELD_OFFSET(::Metric, name_),
  PROTOBUF_FIELD_OFFSET(::Metric, value_),
  PROTOBUF_FIELD_OFFSET(::MetricData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MetricData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MetricData, histogramdata_),
  PROTOBUF_FIELD_OFFSET(::MetricData, counterdata_),
  PROTOBUF_FIELD_OFFSET(::MetricData, guagedata_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HistogramData_HistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HistogramData_HistogramBucket, le_),
  PROTOBUF_FIELD_OFFSET(::HistogramData_HistogramBucket, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HistogramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HistogramData, buckets_),
  PROTOBUF_FIELD_OFFSET(::HistogramData, sum_),
  PROTOBUF_FIELD_OFFSET(::HistogramData, count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MetricPublishRequest)},
  { 6, -1, sizeof(::MetricPublishResponse)},
  { 12, -1, sizeof(::MetricCollectRequest)},
  { 17, -1, sizeof(::MetricCollectResponse)},
  { 23, -1, sizeof(::Metric)},
  { 32, 40, sizeof(::MetricData)},
  { 43, -1, sizeof(::HistogramData_HistogramBucket)},
  { 50, -1, sizeof(::HistogramData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricPublishResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricCollectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricCollectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MetricData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HistogramData_HistogramBucket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HistogramData_default_instance_),
};

const char descriptor_table_protodef_metric_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014metric.proto\032\037google/protobuf/timestam"
  "p.proto\"0\n\024MetricPublishRequest\022\030\n\007metri"
  "cs\030\001 \003(\0132\007.Metric\"5\n\025MetricPublishRespon"
  "se\022\034\n\024totalReceivedMetrics\030\001 \001(\003\"\026\n\024Metr"
  "icCollectRequest\"1\n\025MetricCollectRespons"
  "e\022\030\n\007metrics\030\001 \003(\0132\007.Metric\"x\n\006Metric\022\032\n"
  "\004type\030\001 \001(\0162\014.MetricTypes\022(\n\004time\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022\014\n\004name\030\003 \001("
  "\t\022\032\n\005value\030\004 \001(\0132\013.MetricData\"\232\001\n\nMetric"
  "Data\022*\n\rhistogramData\030\001 \001(\0132\016.HistogramD"
  "ataH\000\210\001\001\022\030\n\013counterData\030\002 \001(\004H\001\210\001\001\022\026\n\tgu"
  "ageData\030\003 \001(\003H\002\210\001\001B\020\n\016_histogramDataB\016\n\014"
  "_counterDataB\014\n\n_guageData\"\212\001\n\rHistogram"
  "Data\022/\n\007buckets\030\002 \003(\0132\036.HistogramData.Hi"
  "stogramBucket\022\013\n\003sum\030\003 \001(\003\022\r\n\005count\030\004 \001("
  "\004\032,\n\017HistogramBucket\022\n\n\002le\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\004*4\n\013MetricTypes\022\013\n\007COUNTER\020\000\022\t\n\005G"
  "UAGE\020\001\022\r\n\tHISTOGRAM\020\0022\223\001\n\rMetricManager\022"
  "@\n\rMetricPublish\022\025.MetricPublishRequest\032"
  "\026.MetricPublishResponse\"\000\022@\n\rMetricColle"
  "ct\022\025.MetricCollectRequest\032\026.MetricCollec"
  "tResponse\"\000B\017Z\rpos.telemetryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metric_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metric_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metric_2eproto = {
  false, false, 876, descriptor_table_protodef_metric_2eproto, "metric.proto", 
  &descriptor_table_metric_2eproto_once, descriptor_table_metric_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_metric_2eproto::offsets,
  file_level_metadata_metric_2eproto, file_level_enum_descriptors_metric_2eproto, file_level_service_descriptors_metric_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_metric_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metric_2eproto);
  return descriptor_table_metric_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_metric_2eproto(&descriptor_table_metric_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metric_2eproto);
  return file_level_enum_descriptors_metric_2eproto[0];
}
bool MetricTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MetricPublishRequest::_Internal {
 public:
};

MetricPublishRequest::MetricPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricPublishRequest)
}
MetricPublishRequest::MetricPublishRequest(const MetricPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MetricPublishRequest)
}

void MetricPublishRequest::SharedCtor() {
}

MetricPublishRequest::~MetricPublishRequest() {
  // @@protoc_insertion_point(destructor:MetricPublishRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricPublishRequest::ArenaDtor(void* object) {
  MetricPublishRequest* _this = reinterpret_cast< MetricPublishRequest* >(object);
  (void)_this;
}
void MetricPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricPublishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Metric metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricPublishRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricPublishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Metric metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricPublishRequest)
  return target;
}

size_t MetricPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricPublishRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Metric metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricPublishRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricPublishRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricPublishRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricPublishRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricPublishRequest)
    MergeFrom(*source);
  }
}

void MetricPublishRequest::MergeFrom(const MetricPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
}

void MetricPublishRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricPublishRequest::CopyFrom(const MetricPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricPublishRequest::IsInitialized() const {
  return true;
}

void MetricPublishRequest::InternalSwap(MetricPublishRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricPublishRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricPublishResponse::_Internal {
 public:
};

MetricPublishResponse::MetricPublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricPublishResponse)
}
MetricPublishResponse::MetricPublishResponse(const MetricPublishResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  totalreceivedmetrics_ = from.totalreceivedmetrics_;
  // @@protoc_insertion_point(copy_constructor:MetricPublishResponse)
}

void MetricPublishResponse::SharedCtor() {
totalreceivedmetrics_ = PROTOBUF_LONGLONG(0);
}

MetricPublishResponse::~MetricPublishResponse() {
  // @@protoc_insertion_point(destructor:MetricPublishResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricPublishResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricPublishResponse::ArenaDtor(void* object) {
  MetricPublishResponse* _this = reinterpret_cast< MetricPublishResponse* >(object);
  (void)_this;
}
void MetricPublishResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricPublishResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricPublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricPublishResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  totalreceivedmetrics_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricPublishResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 totalReceivedMetrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          totalreceivedmetrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricPublishResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricPublishResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalReceivedMetrics = 1;
  if (this->totalreceivedmetrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_totalreceivedmetrics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricPublishResponse)
  return target;
}

size_t MetricPublishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricPublishResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 totalReceivedMetrics = 1;
  if (this->totalreceivedmetrics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalreceivedmetrics());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricPublishResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricPublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricPublishResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricPublishResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricPublishResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricPublishResponse)
    MergeFrom(*source);
  }
}

void MetricPublishResponse::MergeFrom(const MetricPublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricPublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalreceivedmetrics() != 0) {
    _internal_set_totalreceivedmetrics(from._internal_totalreceivedmetrics());
  }
}

void MetricPublishResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricPublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricPublishResponse::CopyFrom(const MetricPublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricPublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricPublishResponse::IsInitialized() const {
  return true;
}

void MetricPublishResponse::InternalSwap(MetricPublishResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(totalreceivedmetrics_, other->totalreceivedmetrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricPublishResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricCollectRequest::_Internal {
 public:
};

MetricCollectRequest::MetricCollectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricCollectRequest)
}
MetricCollectRequest::MetricCollectRequest(const MetricCollectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MetricCollectRequest)
}

void MetricCollectRequest::SharedCtor() {
}

MetricCollectRequest::~MetricCollectRequest() {
  // @@protoc_insertion_point(destructor:MetricCollectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricCollectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricCollectRequest::ArenaDtor(void* object) {
  MetricCollectRequest* _this = reinterpret_cast< MetricCollectRequest* >(object);
  (void)_this;
}
void MetricCollectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricCollectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricCollectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricCollectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricCollectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricCollectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricCollectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricCollectRequest)
  return target;
}

size_t MetricCollectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricCollectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricCollectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricCollectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricCollectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricCollectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricCollectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricCollectRequest)
    MergeFrom(*source);
  }
}

void MetricCollectRequest::MergeFrom(const MetricCollectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricCollectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MetricCollectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricCollectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricCollectRequest::CopyFrom(const MetricCollectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricCollectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricCollectRequest::IsInitialized() const {
  return true;
}

void MetricCollectRequest::InternalSwap(MetricCollectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricCollectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricCollectResponse::_Internal {
 public:
};

MetricCollectResponse::MetricCollectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricCollectResponse)
}
MetricCollectResponse::MetricCollectResponse(const MetricCollectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MetricCollectResponse)
}

void MetricCollectResponse::SharedCtor() {
}

MetricCollectResponse::~MetricCollectResponse() {
  // @@protoc_insertion_point(destructor:MetricCollectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricCollectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricCollectResponse::ArenaDtor(void* object) {
  MetricCollectResponse* _this = reinterpret_cast< MetricCollectResponse* >(object);
  (void)_this;
}
void MetricCollectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricCollectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricCollectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricCollectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricCollectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Metric metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricCollectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricCollectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Metric metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricCollectResponse)
  return target;
}

size_t MetricCollectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricCollectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Metric metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricCollectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricCollectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricCollectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricCollectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricCollectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricCollectResponse)
    MergeFrom(*source);
  }
}

void MetricCollectResponse::MergeFrom(const MetricCollectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricCollectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
}

void MetricCollectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricCollectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricCollectResponse::CopyFrom(const MetricCollectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricCollectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricCollectResponse::IsInitialized() const {
  return true;
}

void MetricCollectResponse::InternalSwap(MetricCollectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricCollectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metric::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Metric* msg);
  static const ::MetricData& value(const Metric* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Metric::_Internal::time(const Metric* msg) {
  return *msg->time_;
}
const ::MetricData&
Metric::_Internal::value(const Metric* msg) {
  return *msg->value_;
}
void Metric::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::MetricData(*from.value_);
  } else {
    value_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Metric)
}

void Metric::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(type_));
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete value_;
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MetricTypes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MetricTypes>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Metric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MetricData value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MetricTypes type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Metric.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .MetricData value = 4;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .MetricData value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .MetricTypes type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Metric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::MetricData::MergeFrom(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metric, type_)
      + sizeof(Metric::type_)
      - PROTOBUF_FIELD_OFFSET(Metric, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetricData::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricData>()._has_bits_);
  static const ::HistogramData& histogramdata(const MetricData* msg);
  static void set_has_histogramdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_counterdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::HistogramData&
MetricData::_Internal::histogramdata(const MetricData* msg) {
  return *msg->histogramdata_;
}
MetricData::MetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MetricData)
}
MetricData::MetricData(const MetricData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_histogramdata()) {
    histogramdata_ = new ::HistogramData(*from.histogramdata_);
  } else {
    histogramdata_ = nullptr;
  }
  ::memcpy(&counterdata_, &from.counterdata_,
    static_cast<size_t>(reinterpret_cast<char*>(&guagedata_) -
    reinterpret_cast<char*>(&counterdata_)) + sizeof(guagedata_));
  // @@protoc_insertion_point(copy_constructor:MetricData)
}

void MetricData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&histogramdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guagedata_) -
    reinterpret_cast<char*>(&histogramdata_)) + sizeof(guagedata_));
}

MetricData::~MetricData() {
  // @@protoc_insertion_point(destructor:MetricData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete histogramdata_;
}

void MetricData::ArenaDtor(void* object) {
  MetricData* _this = reinterpret_cast< MetricData* >(object);
  (void)_this;
}
void MetricData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricData::Clear() {
// @@protoc_insertion_point(message_clear_start:MetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && histogramdata_ != nullptr) {
      delete histogramdata_;
    }
    histogramdata_ = nullptr;
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&counterdata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guagedata_) -
        reinterpret_cast<char*>(&counterdata_)) + sizeof(guagedata_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .HistogramData histogramData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogramdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 counterData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_counterdata(&has_bits);
          counterdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 guageData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_guagedata(&has_bits);
          guagedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HistogramData histogramData = 1;
  if (_internal_has_histogramdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::histogramdata(this), target, stream);
  }

  // uint64 counterData = 2;
  if (_internal_has_counterdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_counterdata(), target);
  }

  // int64 guageData = 3;
  if (_internal_has_guagedata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_guagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetricData)
  return target;
}

size_t MetricData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetricData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .HistogramData histogramData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *histogramdata_);
    }

    // uint64 counterData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_counterdata());
    }

    // int64 guageData = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_guagedata());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MetricData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MetricData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MetricData)
    MergeFrom(*source);
  }
}

void MetricData::MergeFrom(const MetricData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MetricData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_histogramdata()->::HistogramData::MergeFrom(from._internal_histogramdata());
    }
    if (cached_has_bits & 0x00000002u) {
      counterdata_ = from.counterdata_;
    }
    if (cached_has_bits & 0x00000004u) {
      guagedata_ = from.guagedata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricData::CopyFrom(const MetricData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricData::IsInitialized() const {
  return true;
}

void MetricData::InternalSwap(MetricData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricData, guagedata_)
      + sizeof(MetricData::guagedata_)
      - PROTOBUF_FIELD_OFFSET(MetricData, histogramdata_)>(
          reinterpret_cast<char*>(&histogramdata_),
          reinterpret_cast<char*>(&other->histogramdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistogramData_HistogramBucket::_Internal {
 public:
};

HistogramData_HistogramBucket::HistogramData_HistogramBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HistogramData.HistogramBucket)
}
HistogramData_HistogramBucket::HistogramData_HistogramBucket(const HistogramData_HistogramBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  le_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_le().empty()) {
    le_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_le(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:HistogramData.HistogramBucket)
}

void HistogramData_HistogramBucket::SharedCtor() {
le_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = PROTOBUF_ULONGLONG(0);
}

HistogramData_HistogramBucket::~HistogramData_HistogramBucket() {
  // @@protoc_insertion_point(destructor:HistogramData.HistogramBucket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramData_HistogramBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  le_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistogramData_HistogramBucket::ArenaDtor(void* object) {
  HistogramData_HistogramBucket* _this = reinterpret_cast< HistogramData_HistogramBucket* >(object);
  (void)_this;
}
void HistogramData_HistogramBucket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramData_HistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistogramData_HistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:HistogramData.HistogramBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  le_.ClearToEmpty();
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramData_HistogramBucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string le = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_le();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HistogramData.HistogramBucket.le"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramData_HistogramBucket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HistogramData.HistogramBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string le = 1;
  if (this->le().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_le().data(), static_cast<int>(this->_internal_le().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HistogramData.HistogramBucket.le");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_le(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HistogramData.HistogramBucket)
  return target;
}

size_t HistogramData_HistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HistogramData.HistogramBucket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string le = 1;
  if (this->le().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_le());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramData_HistogramBucket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HistogramData.HistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramData_HistogramBucket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramData_HistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HistogramData.HistogramBucket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HistogramData.HistogramBucket)
    MergeFrom(*source);
  }
}

void HistogramData_HistogramBucket::MergeFrom(const HistogramData_HistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HistogramData.HistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.le().size() > 0) {
    _internal_set_le(from._internal_le());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void HistogramData_HistogramBucket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HistogramData.HistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramData_HistogramBucket::CopyFrom(const HistogramData_HistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HistogramData.HistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramData_HistogramBucket::IsInitialized() const {
  return true;
}

void HistogramData_HistogramBucket::InternalSwap(HistogramData_HistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  le_.Swap(&other->le_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramData_HistogramBucket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistogramData::_Internal {
 public:
};

HistogramData::HistogramData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buckets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HistogramData)
}
HistogramData::HistogramData(const HistogramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sum_, &from.sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&sum_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:HistogramData)
}

void HistogramData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&sum_)) + sizeof(count_));
}

HistogramData::~HistogramData() {
  // @@protoc_insertion_point(destructor:HistogramData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistogramData::ArenaDtor(void* object) {
  HistogramData* _this = reinterpret_cast< HistogramData* >(object);
  (void)_this;
}
void HistogramData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistogramData::Clear() {
// @@protoc_insertion_point(message_clear_start:HistogramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  ::memset(&sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&sum_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HistogramData.HistogramBucket buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HistogramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HistogramData.HistogramBucket buckets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buckets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buckets(i), target, stream);
  }

  // int64 sum = 3;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sum(), target);
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HistogramData)
  return target;
}

size_t HistogramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HistogramData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HistogramData.HistogramBucket buckets = 2;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 sum = 3;
  if (this->sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sum());
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HistogramData)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HistogramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HistogramData)
    MergeFrom(*source);
  }
}

void HistogramData::MergeFrom(const HistogramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HistogramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void HistogramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HistogramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramData::CopyFrom(const HistogramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HistogramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramData::IsInitialized() const {
  return true;
}

void HistogramData::InternalSwap(HistogramData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buckets_.InternalSwap(&other->buckets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramData, count_)
      + sizeof(HistogramData::count_)
      - PROTOBUF_FIELD_OFFSET(HistogramData, sum_)>(
          reinterpret_cast<char*>(&sum_),
          reinterpret_cast<char*>(&other->sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MetricPublishRequest* Arena::CreateMaybeMessage< ::MetricPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricPublishResponse* Arena::CreateMaybeMessage< ::MetricPublishResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricPublishResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricCollectRequest* Arena::CreateMaybeMessage< ::MetricCollectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricCollectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricCollectResponse* Arena::CreateMaybeMessage< ::MetricCollectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricCollectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Metric* Arena::CreateMaybeMessage< ::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::MetricData* Arena::CreateMaybeMessage< ::MetricData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetricData >(arena);
}
template<> PROTOBUF_NOINLINE ::HistogramData_HistogramBucket* Arena::CreateMaybeMessage< ::HistogramData_HistogramBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HistogramData_HistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::HistogramData* Arena::CreateMaybeMessage< ::HistogramData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HistogramData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
