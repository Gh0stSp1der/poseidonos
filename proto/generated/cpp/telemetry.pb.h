// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_telemetry_2eproto_metadata_getter(int index);
class CollectRequest;
struct CollectRequestDefaultTypeInternal;
extern CollectRequestDefaultTypeInternal _CollectRequest_default_instance_;
class CollectResponse;
struct CollectResponseDefaultTypeInternal;
extern CollectResponseDefaultTypeInternal _CollectResponse_default_instance_;
class ConfigureMetadataRequest;
struct ConfigureMetadataRequestDefaultTypeInternal;
extern ConfigureMetadataRequestDefaultTypeInternal _ConfigureMetadataRequest_default_instance_;
class ConfigureMetadataResponse;
struct ConfigureMetadataResponseDefaultTypeInternal;
extern ConfigureMetadataResponseDefaultTypeInternal _ConfigureMetadataResponse_default_instance_;
class CounterProto;
struct CounterProtoDefaultTypeInternal;
extern CounterProtoDefaultTypeInternal _CounterProto_default_instance_;
class DisableRequest;
struct DisableRequestDefaultTypeInternal;
extern DisableRequestDefaultTypeInternal _DisableRequest_default_instance_;
class DisableResponse;
struct DisableResponseDefaultTypeInternal;
extern DisableResponseDefaultTypeInternal _DisableResponse_default_instance_;
class EnableRequest;
struct EnableRequestDefaultTypeInternal;
extern EnableRequestDefaultTypeInternal _EnableRequest_default_instance_;
class EnableResponse;
struct EnableResponseDefaultTypeInternal;
extern EnableResponseDefaultTypeInternal _EnableResponse_default_instance_;
class GaugeProto;
struct GaugeProtoDefaultTypeInternal;
extern GaugeProtoDefaultTypeInternal _GaugeProto_default_instance_;
class HistogramProto;
struct HistogramProtoDefaultTypeInternal;
extern HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
class InfluxStorageProto;
struct InfluxStorageProtoDefaultTypeInternal;
extern InfluxStorageProtoDefaultTypeInternal _InfluxStorageProto_default_instance_;
class InfluxStorageProto_Field;
struct InfluxStorageProto_FieldDefaultTypeInternal;
extern InfluxStorageProto_FieldDefaultTypeInternal _InfluxStorageProto_Field_default_instance_;
class InfluxStorageProto_Tag;
struct InfluxStorageProto_TagDefaultTypeInternal;
extern InfluxStorageProto_TagDefaultTypeInternal _InfluxStorageProto_Tag_default_instance_;
class LatencyProto;
struct LatencyProtoDefaultTypeInternal;
extern LatencyProtoDefaultTypeInternal _LatencyProto_default_instance_;
class PublishRequest;
struct PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
struct PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class TelemetryGeneralMetric;
struct TelemetryGeneralMetricDefaultTypeInternal;
extern TelemetryGeneralMetricDefaultTypeInternal _TelemetryGeneralMetric_default_instance_;
class WbtProto;
struct WbtProtoDefaultTypeInternal;
extern WbtProtoDefaultTypeInternal _WbtProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CollectRequest* Arena::CreateMaybeMessage<::CollectRequest>(Arena*);
template<> ::CollectResponse* Arena::CreateMaybeMessage<::CollectResponse>(Arena*);
template<> ::ConfigureMetadataRequest* Arena::CreateMaybeMessage<::ConfigureMetadataRequest>(Arena*);
template<> ::ConfigureMetadataResponse* Arena::CreateMaybeMessage<::ConfigureMetadataResponse>(Arena*);
template<> ::CounterProto* Arena::CreateMaybeMessage<::CounterProto>(Arena*);
template<> ::DisableRequest* Arena::CreateMaybeMessage<::DisableRequest>(Arena*);
template<> ::DisableResponse* Arena::CreateMaybeMessage<::DisableResponse>(Arena*);
template<> ::EnableRequest* Arena::CreateMaybeMessage<::EnableRequest>(Arena*);
template<> ::EnableResponse* Arena::CreateMaybeMessage<::EnableResponse>(Arena*);
template<> ::GaugeProto* Arena::CreateMaybeMessage<::GaugeProto>(Arena*);
template<> ::HistogramProto* Arena::CreateMaybeMessage<::HistogramProto>(Arena*);
template<> ::InfluxStorageProto* Arena::CreateMaybeMessage<::InfluxStorageProto>(Arena*);
template<> ::InfluxStorageProto_Field* Arena::CreateMaybeMessage<::InfluxStorageProto_Field>(Arena*);
template<> ::InfluxStorageProto_Tag* Arena::CreateMaybeMessage<::InfluxStorageProto_Tag>(Arena*);
template<> ::LatencyProto* Arena::CreateMaybeMessage<::LatencyProto>(Arena*);
template<> ::PublishRequest* Arena::CreateMaybeMessage<::PublishRequest>(Arena*);
template<> ::PublishResponse* Arena::CreateMaybeMessage<::PublishResponse>(Arena*);
template<> ::TelemetryGeneralMetric* Arena::CreateMaybeMessage<::TelemetryGeneralMetric>(Arena*);
template<> ::WbtProto* Arena::CreateMaybeMessage<::WbtProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PublishRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishRequest) */ {
 public:
  inline PublishRequest() : PublishRequest(nullptr) {}
  virtual ~PublishRequest();
  explicit constexpr PublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRequest(const PublishRequest& from);
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishRequest* New() const final {
    return CreateMaybeMessage<PublishRequest>(nullptr);
  }

  PublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishRequest& from);
  void MergeFrom(const PublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishRequest";
  }
  protected:
  explicit PublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfluxFieldNumber = 2,
    kCountersFieldNumber = 3,
    kGaugesFieldNumber = 4,
    kHistogramsFieldNumber = 5,
    kLatenciesFieldNumber = 6,
    kGeneralMetricFieldNumber = 7,
    kWbtProtoFieldNumber = 8,
  };
  // optional .InfluxStorageProto influx = 2;
  bool has_influx() const;
  private:
  bool _internal_has_influx() const;
  public:
  void clear_influx();
  const ::InfluxStorageProto& influx() const;
  ::InfluxStorageProto* release_influx();
  ::InfluxStorageProto* mutable_influx();
  void set_allocated_influx(::InfluxStorageProto* influx);
  private:
  const ::InfluxStorageProto& _internal_influx() const;
  ::InfluxStorageProto* _internal_mutable_influx();
  public:
  void unsafe_arena_set_allocated_influx(
      ::InfluxStorageProto* influx);
  ::InfluxStorageProto* unsafe_arena_release_influx();

  // optional .CounterProto counters = 3;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::CounterProto& counters() const;
  ::CounterProto* release_counters();
  ::CounterProto* mutable_counters();
  void set_allocated_counters(::CounterProto* counters);
  private:
  const ::CounterProto& _internal_counters() const;
  ::CounterProto* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::CounterProto* counters);
  ::CounterProto* unsafe_arena_release_counters();

  // optional .GaugeProto gauges = 4;
  bool has_gauges() const;
  private:
  bool _internal_has_gauges() const;
  public:
  void clear_gauges();
  const ::GaugeProto& gauges() const;
  ::GaugeProto* release_gauges();
  ::GaugeProto* mutable_gauges();
  void set_allocated_gauges(::GaugeProto* gauges);
  private:
  const ::GaugeProto& _internal_gauges() const;
  ::GaugeProto* _internal_mutable_gauges();
  public:
  void unsafe_arena_set_allocated_gauges(
      ::GaugeProto* gauges);
  ::GaugeProto* unsafe_arena_release_gauges();

  // optional .HistogramProto histograms = 5;
  bool has_histograms() const;
  private:
  bool _internal_has_histograms() const;
  public:
  void clear_histograms();
  const ::HistogramProto& histograms() const;
  ::HistogramProto* release_histograms();
  ::HistogramProto* mutable_histograms();
  void set_allocated_histograms(::HistogramProto* histograms);
  private:
  const ::HistogramProto& _internal_histograms() const;
  ::HistogramProto* _internal_mutable_histograms();
  public:
  void unsafe_arena_set_allocated_histograms(
      ::HistogramProto* histograms);
  ::HistogramProto* unsafe_arena_release_histograms();

  // optional .LatencyProto latencies = 6;
  bool has_latencies() const;
  private:
  bool _internal_has_latencies() const;
  public:
  void clear_latencies();
  const ::LatencyProto& latencies() const;
  ::LatencyProto* release_latencies();
  ::LatencyProto* mutable_latencies();
  void set_allocated_latencies(::LatencyProto* latencies);
  private:
  const ::LatencyProto& _internal_latencies() const;
  ::LatencyProto* _internal_mutable_latencies();
  public:
  void unsafe_arena_set_allocated_latencies(
      ::LatencyProto* latencies);
  ::LatencyProto* unsafe_arena_release_latencies();

  // optional .TelemetryGeneralMetric generalMetric = 7;
  bool has_generalmetric() const;
  private:
  bool _internal_has_generalmetric() const;
  public:
  void clear_generalmetric();
  const ::TelemetryGeneralMetric& generalmetric() const;
  ::TelemetryGeneralMetric* release_generalmetric();
  ::TelemetryGeneralMetric* mutable_generalmetric();
  void set_allocated_generalmetric(::TelemetryGeneralMetric* generalmetric);
  private:
  const ::TelemetryGeneralMetric& _internal_generalmetric() const;
  ::TelemetryGeneralMetric* _internal_mutable_generalmetric();
  public:
  void unsafe_arena_set_allocated_generalmetric(
      ::TelemetryGeneralMetric* generalmetric);
  ::TelemetryGeneralMetric* unsafe_arena_release_generalmetric();

  // optional .WbtProto wbtProto = 8;
  bool has_wbtproto() const;
  private:
  bool _internal_has_wbtproto() const;
  public:
  void clear_wbtproto();
  const ::WbtProto& wbtproto() const;
  ::WbtProto* release_wbtproto();
  ::WbtProto* mutable_wbtproto();
  void set_allocated_wbtproto(::WbtProto* wbtproto);
  private:
  const ::WbtProto& _internal_wbtproto() const;
  ::WbtProto* _internal_mutable_wbtproto();
  public:
  void unsafe_arena_set_allocated_wbtproto(
      ::WbtProto* wbtproto);
  ::WbtProto* unsafe_arena_release_wbtproto();

  // @@protoc_insertion_point(class_scope:PublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::InfluxStorageProto* influx_;
  ::CounterProto* counters_;
  ::GaugeProto* gauges_;
  ::HistogramProto* histograms_;
  ::LatencyProto* latencies_;
  ::TelemetryGeneralMetric* generalmetric_;
  ::WbtProto* wbtproto_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class PublishResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishResponse) */ {
 public:
  inline PublishResponse() : PublishResponse(nullptr) {}
  virtual ~PublishResponse();
  explicit constexpr PublishResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishResponse(const PublishResponse& from);
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishResponse* New() const final {
    return CreateMaybeMessage<PublishResponse>(nullptr);
  }

  PublishResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishResponse& from);
  void MergeFrom(const PublishResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishResponse";
  }
  protected:
  explicit PublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // required bool successful = 1;
  bool has_successful() const;
  private:
  bool _internal_has_successful() const;
  public:
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PublishResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class CollectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CollectRequest) */ {
 public:
  inline CollectRequest() : CollectRequest(nullptr) {}
  virtual ~CollectRequest();
  explicit constexpr CollectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectRequest(const CollectRequest& from);
  CollectRequest(CollectRequest&& from) noexcept
    : CollectRequest() {
    *this = ::std::move(from);
  }

  inline CollectRequest& operator=(const CollectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectRequest& operator=(CollectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectRequest* internal_default_instance() {
    return reinterpret_cast<const CollectRequest*>(
               &_CollectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollectRequest& a, CollectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectRequest* New() const final {
    return CreateMaybeMessage<CollectRequest>(nullptr);
  }

  CollectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectRequest& from);
  void MergeFrom(const CollectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CollectRequest";
  }
  protected:
  explicit CollectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CollectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class CollectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CollectResponse) */ {
 public:
  inline CollectResponse() : CollectResponse(nullptr) {}
  virtual ~CollectResponse();
  explicit constexpr CollectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectResponse(const CollectResponse& from);
  CollectResponse(CollectResponse&& from) noexcept
    : CollectResponse() {
    *this = ::std::move(from);
  }

  inline CollectResponse& operator=(const CollectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectResponse& operator=(CollectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectResponse* internal_default_instance() {
    return reinterpret_cast<const CollectResponse*>(
               &_CollectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CollectResponse& a, CollectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectResponse* New() const final {
    return CreateMaybeMessage<CollectResponse>(nullptr);
  }

  CollectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectResponse& from);
  void MergeFrom(const CollectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CollectResponse";
  }
  protected:
  explicit CollectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfluxFieldNumber = 2,
    kCountersFieldNumber = 3,
    kGaugesFieldNumber = 4,
    kHistogramsFieldNumber = 5,
    kLatenciesFieldNumber = 6,
    kMetadataFieldNumber = 1,
    kGeneralMetricFieldNumber = 7,
    kWbtProtoFieldNumber = 8,
  };
  // repeated .InfluxStorageProto influx = 2;
  int influx_size() const;
  private:
  int _internal_influx_size() const;
  public:
  void clear_influx();
  ::InfluxStorageProto* mutable_influx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto >*
      mutable_influx();
  private:
  const ::InfluxStorageProto& _internal_influx(int index) const;
  ::InfluxStorageProto* _internal_add_influx();
  public:
  const ::InfluxStorageProto& influx(int index) const;
  ::InfluxStorageProto* add_influx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto >&
      influx() const;

  // repeated .CounterProto counters = 3;
  int counters_size() const;
  private:
  int _internal_counters_size() const;
  public:
  void clear_counters();
  ::CounterProto* mutable_counters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CounterProto >*
      mutable_counters();
  private:
  const ::CounterProto& _internal_counters(int index) const;
  ::CounterProto* _internal_add_counters();
  public:
  const ::CounterProto& counters(int index) const;
  ::CounterProto* add_counters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CounterProto >&
      counters() const;

  // repeated .GaugeProto gauges = 4;
  int gauges_size() const;
  private:
  int _internal_gauges_size() const;
  public:
  void clear_gauges();
  ::GaugeProto* mutable_gauges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GaugeProto >*
      mutable_gauges();
  private:
  const ::GaugeProto& _internal_gauges(int index) const;
  ::GaugeProto* _internal_add_gauges();
  public:
  const ::GaugeProto& gauges(int index) const;
  ::GaugeProto* add_gauges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GaugeProto >&
      gauges() const;

  // repeated .HistogramProto histograms = 5;
  int histograms_size() const;
  private:
  int _internal_histograms_size() const;
  public:
  void clear_histograms();
  ::HistogramProto* mutable_histograms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramProto >*
      mutable_histograms();
  private:
  const ::HistogramProto& _internal_histograms(int index) const;
  ::HistogramProto* _internal_add_histograms();
  public:
  const ::HistogramProto& histograms(int index) const;
  ::HistogramProto* add_histograms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramProto >&
      histograms() const;

  // repeated .LatencyProto latencies = 6;
  int latencies_size() const;
  private:
  int _internal_latencies_size() const;
  public:
  void clear_latencies();
  ::LatencyProto* mutable_latencies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LatencyProto >*
      mutable_latencies();
  private:
  const ::LatencyProto& _internal_latencies(int index) const;
  ::LatencyProto* _internal_add_latencies();
  public:
  const ::LatencyProto& latencies(int index) const;
  ::LatencyProto* add_latencies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LatencyProto >&
      latencies() const;

  // required .ConfigureMetadataRequest metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::ConfigureMetadataRequest& metadata() const;
  ::ConfigureMetadataRequest* release_metadata();
  ::ConfigureMetadataRequest* mutable_metadata();
  void set_allocated_metadata(::ConfigureMetadataRequest* metadata);
  private:
  const ::ConfigureMetadataRequest& _internal_metadata() const;
  ::ConfigureMetadataRequest* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::ConfigureMetadataRequest* metadata);
  ::ConfigureMetadataRequest* unsafe_arena_release_metadata();

  // optional .TelemetryGeneralMetric generalMetric = 7;
  bool has_generalmetric() const;
  private:
  bool _internal_has_generalmetric() const;
  public:
  void clear_generalmetric();
  const ::TelemetryGeneralMetric& generalmetric() const;
  ::TelemetryGeneralMetric* release_generalmetric();
  ::TelemetryGeneralMetric* mutable_generalmetric();
  void set_allocated_generalmetric(::TelemetryGeneralMetric* generalmetric);
  private:
  const ::TelemetryGeneralMetric& _internal_generalmetric() const;
  ::TelemetryGeneralMetric* _internal_mutable_generalmetric();
  public:
  void unsafe_arena_set_allocated_generalmetric(
      ::TelemetryGeneralMetric* generalmetric);
  ::TelemetryGeneralMetric* unsafe_arena_release_generalmetric();

  // optional .WbtProto wbtProto = 8;
  bool has_wbtproto() const;
  private:
  bool _internal_has_wbtproto() const;
  public:
  void clear_wbtproto();
  const ::WbtProto& wbtproto() const;
  ::WbtProto* release_wbtproto();
  ::WbtProto* mutable_wbtproto();
  void set_allocated_wbtproto(::WbtProto* wbtproto);
  private:
  const ::WbtProto& _internal_wbtproto() const;
  ::WbtProto* _internal_mutable_wbtproto();
  public:
  void unsafe_arena_set_allocated_wbtproto(
      ::WbtProto* wbtproto);
  ::WbtProto* unsafe_arena_release_wbtproto();

  // @@protoc_insertion_point(class_scope:CollectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto > influx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CounterProto > counters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GaugeProto > gauges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramProto > histograms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LatencyProto > latencies_;
  ::ConfigureMetadataRequest* metadata_;
  ::TelemetryGeneralMetric* generalmetric_;
  ::WbtProto* wbtproto_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class EnableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnableRequest) */ {
 public:
  inline EnableRequest() : EnableRequest(nullptr) {}
  virtual ~EnableRequest();
  explicit constexpr EnableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableRequest(const EnableRequest& from);
  EnableRequest(EnableRequest&& from) noexcept
    : EnableRequest() {
    *this = ::std::move(from);
  }

  inline EnableRequest& operator=(const EnableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableRequest& operator=(EnableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableRequest* internal_default_instance() {
    return reinterpret_cast<const EnableRequest*>(
               &_EnableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnableRequest& a, EnableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableRequest* New() const final {
    return CreateMaybeMessage<EnableRequest>(nullptr);
  }

  EnableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableRequest& from);
  void MergeFrom(const EnableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnableRequest";
  }
  protected:
  explicit EnableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EnableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class EnableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnableResponse) */ {
 public:
  inline EnableResponse() : EnableResponse(nullptr) {}
  virtual ~EnableResponse();
  explicit constexpr EnableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableResponse(const EnableResponse& from);
  EnableResponse(EnableResponse&& from) noexcept
    : EnableResponse() {
    *this = ::std::move(from);
  }

  inline EnableResponse& operator=(const EnableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableResponse& operator=(EnableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableResponse* internal_default_instance() {
    return reinterpret_cast<const EnableResponse*>(
               &_EnableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnableResponse& a, EnableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableResponse* New() const final {
    return CreateMaybeMessage<EnableResponse>(nullptr);
  }

  EnableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableResponse& from);
  void MergeFrom(const EnableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnableResponse";
  }
  protected:
  explicit EnableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // required bool successful = 1;
  bool has_successful() const;
  private:
  bool _internal_has_successful() const;
  public:
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EnableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class DisableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DisableRequest) */ {
 public:
  inline DisableRequest() : DisableRequest(nullptr) {}
  virtual ~DisableRequest();
  explicit constexpr DisableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableRequest(const DisableRequest& from);
  DisableRequest(DisableRequest&& from) noexcept
    : DisableRequest() {
    *this = ::std::move(from);
  }

  inline DisableRequest& operator=(const DisableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableRequest& operator=(DisableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableRequest* internal_default_instance() {
    return reinterpret_cast<const DisableRequest*>(
               &_DisableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DisableRequest& a, DisableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableRequest* New() const final {
    return CreateMaybeMessage<DisableRequest>(nullptr);
  }

  DisableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableRequest& from);
  void MergeFrom(const DisableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DisableRequest";
  }
  protected:
  explicit DisableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DisableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class DisableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DisableResponse) */ {
 public:
  inline DisableResponse() : DisableResponse(nullptr) {}
  virtual ~DisableResponse();
  explicit constexpr DisableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableResponse(const DisableResponse& from);
  DisableResponse(DisableResponse&& from) noexcept
    : DisableResponse() {
    *this = ::std::move(from);
  }

  inline DisableResponse& operator=(const DisableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableResponse& operator=(DisableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableResponse* internal_default_instance() {
    return reinterpret_cast<const DisableResponse*>(
               &_DisableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DisableResponse& a, DisableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableResponse* New() const final {
    return CreateMaybeMessage<DisableResponse>(nullptr);
  }

  DisableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableResponse& from);
  void MergeFrom(const DisableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DisableResponse";
  }
  protected:
  explicit DisableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // required bool successful = 1;
  bool has_successful() const;
  private:
  bool _internal_has_successful() const;
  public:
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DisableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class ConfigureMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigureMetadataRequest) */ {
 public:
  inline ConfigureMetadataRequest() : ConfigureMetadataRequest(nullptr) {}
  virtual ~ConfigureMetadataRequest();
  explicit constexpr ConfigureMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureMetadataRequest(const ConfigureMetadataRequest& from);
  ConfigureMetadataRequest(ConfigureMetadataRequest&& from) noexcept
    : ConfigureMetadataRequest() {
    *this = ::std::move(from);
  }

  inline ConfigureMetadataRequest& operator=(const ConfigureMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureMetadataRequest& operator=(ConfigureMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigureMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigureMetadataRequest*>(
               &_ConfigureMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigureMetadataRequest& a, ConfigureMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigureMetadataRequest* New() const final {
    return CreateMaybeMessage<ConfigureMetadataRequest>(nullptr);
  }

  ConfigureMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigureMetadataRequest& from);
  void MergeFrom(const ConfigureMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigureMetadataRequest";
  }
  protected:
  explicit ConfigureMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGitHashFieldNumber = 1,
    kHostNameFieldNumber = 2,
    kHostTypeFieldNumber = 3,
    kIpAddrFieldNumber = 4,
    kApplicationNameFieldNumber = 5,
  };
  // required string git_hash = 1;
  bool has_git_hash() const;
  private:
  bool _internal_has_git_hash() const;
  public:
  void clear_git_hash();
  const std::string& git_hash() const;
  void set_git_hash(const std::string& value);
  void set_git_hash(std::string&& value);
  void set_git_hash(const char* value);
  void set_git_hash(const char* value, size_t size);
  std::string* mutable_git_hash();
  std::string* release_git_hash();
  void set_allocated_git_hash(std::string* git_hash);
  private:
  const std::string& _internal_git_hash() const;
  void _internal_set_git_hash(const std::string& value);
  std::string* _internal_mutable_git_hash();
  public:

  // required string host_name = 2;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // required string host_type = 3;
  bool has_host_type() const;
  private:
  bool _internal_has_host_type() const;
  public:
  void clear_host_type();
  const std::string& host_type() const;
  void set_host_type(const std::string& value);
  void set_host_type(std::string&& value);
  void set_host_type(const char* value);
  void set_host_type(const char* value, size_t size);
  std::string* mutable_host_type();
  std::string* release_host_type();
  void set_allocated_host_type(std::string* host_type);
  private:
  const std::string& _internal_host_type() const;
  void _internal_set_host_type(const std::string& value);
  std::string* _internal_mutable_host_type();
  public:

  // required string ip_addr = 4;
  bool has_ip_addr() const;
  private:
  bool _internal_has_ip_addr() const;
  public:
  void clear_ip_addr();
  const std::string& ip_addr() const;
  void set_ip_addr(const std::string& value);
  void set_ip_addr(std::string&& value);
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  std::string* mutable_ip_addr();
  std::string* release_ip_addr();
  void set_allocated_ip_addr(std::string* ip_addr);
  private:
  const std::string& _internal_ip_addr() const;
  void _internal_set_ip_addr(const std::string& value);
  std::string* _internal_mutable_ip_addr();
  public:

  // required string application_name = 5;
  bool has_application_name() const;
  private:
  bool _internal_has_application_name() const;
  public:
  void clear_application_name();
  const std::string& application_name() const;
  void set_application_name(const std::string& value);
  void set_application_name(std::string&& value);
  void set_application_name(const char* value);
  void set_application_name(const char* value, size_t size);
  std::string* mutable_application_name();
  std::string* release_application_name();
  void set_allocated_application_name(std::string* application_name);
  private:
  const std::string& _internal_application_name() const;
  void _internal_set_application_name(const std::string& value);
  std::string* _internal_mutable_application_name();
  public:

  // @@protoc_insertion_point(class_scope:ConfigureMetadataRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_name_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class ConfigureMetadataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigureMetadataResponse) */ {
 public:
  inline ConfigureMetadataResponse() : ConfigureMetadataResponse(nullptr) {}
  virtual ~ConfigureMetadataResponse();
  explicit constexpr ConfigureMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureMetadataResponse(const ConfigureMetadataResponse& from);
  ConfigureMetadataResponse(ConfigureMetadataResponse&& from) noexcept
    : ConfigureMetadataResponse() {
    *this = ::std::move(from);
  }

  inline ConfigureMetadataResponse& operator=(const ConfigureMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureMetadataResponse& operator=(ConfigureMetadataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigureMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigureMetadataResponse*>(
               &_ConfigureMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigureMetadataResponse& a, ConfigureMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureMetadataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigureMetadataResponse* New() const final {
    return CreateMaybeMessage<ConfigureMetadataResponse>(nullptr);
  }

  ConfigureMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigureMetadataResponse& from);
  void MergeFrom(const ConfigureMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigureMetadataResponse";
  }
  protected:
  explicit ConfigureMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kSuccessfulFieldNumber = 1,
    kCollectLatencyMsFieldNumber = 2,
  };
  // optional string reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // required bool successful = 1;
  bool has_successful() const;
  private:
  bool _internal_has_successful() const;
  public:
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // required int32 collect_latency_ms = 2;
  bool has_collect_latency_ms() const;
  private:
  bool _internal_has_collect_latency_ms() const;
  public:
  void clear_collect_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 collect_latency_ms() const;
  void set_collect_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_collect_latency_ms() const;
  void _internal_set_collect_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigureMetadataResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  ::PROTOBUF_NAMESPACE_ID::int32 collect_latency_ms_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class InfluxStorageProto_Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfluxStorageProto.Tag) */ {
 public:
  inline InfluxStorageProto_Tag() : InfluxStorageProto_Tag(nullptr) {}
  virtual ~InfluxStorageProto_Tag();
  explicit constexpr InfluxStorageProto_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfluxStorageProto_Tag(const InfluxStorageProto_Tag& from);
  InfluxStorageProto_Tag(InfluxStorageProto_Tag&& from) noexcept
    : InfluxStorageProto_Tag() {
    *this = ::std::move(from);
  }

  inline InfluxStorageProto_Tag& operator=(const InfluxStorageProto_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfluxStorageProto_Tag& operator=(InfluxStorageProto_Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfluxStorageProto_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfluxStorageProto_Tag* internal_default_instance() {
    return reinterpret_cast<const InfluxStorageProto_Tag*>(
               &_InfluxStorageProto_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InfluxStorageProto_Tag& a, InfluxStorageProto_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(InfluxStorageProto_Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfluxStorageProto_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfluxStorageProto_Tag* New() const final {
    return CreateMaybeMessage<InfluxStorageProto_Tag>(nullptr);
  }

  InfluxStorageProto_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfluxStorageProto_Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfluxStorageProto_Tag& from);
  void MergeFrom(const InfluxStorageProto_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfluxStorageProto_Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfluxStorageProto.Tag";
  }
  protected:
  explicit InfluxStorageProto_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagNameFieldNumber = 1,
    kTagValueFieldNumber = 2,
  };
  // required string tag_name = 1;
  bool has_tag_name() const;
  private:
  bool _internal_has_tag_name() const;
  public:
  void clear_tag_name();
  const std::string& tag_name() const;
  void set_tag_name(const std::string& value);
  void set_tag_name(std::string&& value);
  void set_tag_name(const char* value);
  void set_tag_name(const char* value, size_t size);
  std::string* mutable_tag_name();
  std::string* release_tag_name();
  void set_allocated_tag_name(std::string* tag_name);
  private:
  const std::string& _internal_tag_name() const;
  void _internal_set_tag_name(const std::string& value);
  std::string* _internal_mutable_tag_name();
  public:

  // required string tag_value = 2;
  bool has_tag_value() const;
  private:
  bool _internal_has_tag_value() const;
  public:
  void clear_tag_value();
  const std::string& tag_value() const;
  void set_tag_value(const std::string& value);
  void set_tag_value(std::string&& value);
  void set_tag_value(const char* value);
  void set_tag_value(const char* value, size_t size);
  std::string* mutable_tag_value();
  std::string* release_tag_value();
  void set_allocated_tag_value(std::string* tag_value);
  private:
  const std::string& _internal_tag_value() const;
  void _internal_set_tag_value(const std::string& value);
  std::string* _internal_mutable_tag_value();
  public:

  // @@protoc_insertion_point(class_scope:InfluxStorageProto.Tag)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_value_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class InfluxStorageProto_Field PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfluxStorageProto.Field) */ {
 public:
  inline InfluxStorageProto_Field() : InfluxStorageProto_Field(nullptr) {}
  virtual ~InfluxStorageProto_Field();
  explicit constexpr InfluxStorageProto_Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfluxStorageProto_Field(const InfluxStorageProto_Field& from);
  InfluxStorageProto_Field(InfluxStorageProto_Field&& from) noexcept
    : InfluxStorageProto_Field() {
    *this = ::std::move(from);
  }

  inline InfluxStorageProto_Field& operator=(const InfluxStorageProto_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfluxStorageProto_Field& operator=(InfluxStorageProto_Field&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfluxStorageProto_Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfluxStorageProto_Field* internal_default_instance() {
    return reinterpret_cast<const InfluxStorageProto_Field*>(
               &_InfluxStorageProto_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InfluxStorageProto_Field& a, InfluxStorageProto_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(InfluxStorageProto_Field* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfluxStorageProto_Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfluxStorageProto_Field* New() const final {
    return CreateMaybeMessage<InfluxStorageProto_Field>(nullptr);
  }

  InfluxStorageProto_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfluxStorageProto_Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfluxStorageProto_Field& from);
  void MergeFrom(const InfluxStorageProto_Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfluxStorageProto_Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfluxStorageProto.Field";
  }
  protected:
  explicit InfluxStorageProto_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // required string field_name = 1;
  bool has_field_name() const;
  private:
  bool _internal_has_field_name() const;
  public:
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // required string field_value = 2;
  bool has_field_value() const;
  private:
  bool _internal_has_field_value() const;
  public:
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const char* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // @@protoc_insertion_point(class_scope:InfluxStorageProto.Field)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class InfluxStorageProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfluxStorageProto) */ {
 public:
  inline InfluxStorageProto() : InfluxStorageProto(nullptr) {}
  virtual ~InfluxStorageProto();
  explicit constexpr InfluxStorageProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfluxStorageProto(const InfluxStorageProto& from);
  InfluxStorageProto(InfluxStorageProto&& from) noexcept
    : InfluxStorageProto() {
    *this = ::std::move(from);
  }

  inline InfluxStorageProto& operator=(const InfluxStorageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfluxStorageProto& operator=(InfluxStorageProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InfluxStorageProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfluxStorageProto* internal_default_instance() {
    return reinterpret_cast<const InfluxStorageProto*>(
               &_InfluxStorageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InfluxStorageProto& a, InfluxStorageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InfluxStorageProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfluxStorageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfluxStorageProto* New() const final {
    return CreateMaybeMessage<InfluxStorageProto>(nullptr);
  }

  InfluxStorageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfluxStorageProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfluxStorageProto& from);
  void MergeFrom(const InfluxStorageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfluxStorageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfluxStorageProto";
  }
  protected:
  explicit InfluxStorageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef InfluxStorageProto_Tag Tag;
  typedef InfluxStorageProto_Field Field;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kFieldsFieldNumber = 3,
    kMeasurementFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // repeated .InfluxStorageProto.Tag tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::InfluxStorageProto_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Tag >*
      mutable_tags();
  private:
  const ::InfluxStorageProto_Tag& _internal_tags(int index) const;
  ::InfluxStorageProto_Tag* _internal_add_tags();
  public:
  const ::InfluxStorageProto_Tag& tags(int index) const;
  ::InfluxStorageProto_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Tag >&
      tags() const;

  // repeated .InfluxStorageProto.Field fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::InfluxStorageProto_Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Field >*
      mutable_fields();
  private:
  const ::InfluxStorageProto_Field& _internal_fields(int index) const;
  ::InfluxStorageProto_Field* _internal_add_fields();
  public:
  const ::InfluxStorageProto_Field& fields(int index) const;
  ::InfluxStorageProto_Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Field >&
      fields() const;

  // required string measurement = 1;
  bool has_measurement() const;
  private:
  bool _internal_has_measurement() const;
  public:
  void clear_measurement();
  const std::string& measurement() const;
  void set_measurement(const std::string& value);
  void set_measurement(std::string&& value);
  void set_measurement(const char* value);
  void set_measurement(const char* value, size_t size);
  std::string* mutable_measurement();
  std::string* release_measurement();
  void set_allocated_measurement(std::string* measurement);
  private:
  const std::string& _internal_measurement() const;
  void _internal_set_measurement(const std::string& value);
  std::string* _internal_mutable_measurement();
  public:

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:InfluxStorageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Field > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr measurement_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class CounterProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CounterProto) */ {
 public:
  inline CounterProto() : CounterProto(nullptr) {}
  virtual ~CounterProto();
  explicit constexpr CounterProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CounterProto(const CounterProto& from);
  CounterProto(CounterProto&& from) noexcept
    : CounterProto() {
    *this = ::std::move(from);
  }

  inline CounterProto& operator=(const CounterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CounterProto& operator=(CounterProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CounterProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CounterProto* internal_default_instance() {
    return reinterpret_cast<const CounterProto*>(
               &_CounterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CounterProto& a, CounterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CounterProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CounterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CounterProto* New() const final {
    return CreateMaybeMessage<CounterProto>(nullptr);
  }

  CounterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CounterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CounterProto& from);
  void MergeFrom(const CounterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CounterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CounterProto";
  }
  protected:
  explicit CounterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required int64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CounterProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class GaugeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GaugeProto) */ {
 public:
  inline GaugeProto() : GaugeProto(nullptr) {}
  virtual ~GaugeProto();
  explicit constexpr GaugeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GaugeProto(const GaugeProto& from);
  GaugeProto(GaugeProto&& from) noexcept
    : GaugeProto() {
    *this = ::std::move(from);
  }

  inline GaugeProto& operator=(const GaugeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaugeProto& operator=(GaugeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GaugeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GaugeProto* internal_default_instance() {
    return reinterpret_cast<const GaugeProto*>(
               &_GaugeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GaugeProto& a, GaugeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GaugeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GaugeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaugeProto* New() const final {
    return CreateMaybeMessage<GaugeProto>(nullptr);
  }

  GaugeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaugeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GaugeProto& from);
  void MergeFrom(const GaugeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GaugeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GaugeProto";
  }
  protected:
  explicit GaugeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required int64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:GaugeProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class HistogramProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HistogramProto) */ {
 public:
  inline HistogramProto() : HistogramProto(nullptr) {}
  virtual ~HistogramProto();
  explicit constexpr HistogramProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistogramProto(const HistogramProto& from);
  HistogramProto(HistogramProto&& from) noexcept
    : HistogramProto() {
    *this = ::std::move(from);
  }

  inline HistogramProto& operator=(const HistogramProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramProto& operator=(HistogramProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramProto* internal_default_instance() {
    return reinterpret_cast<const HistogramProto*>(
               &_HistogramProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HistogramProto& a, HistogramProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramProto* New() const final {
    return CreateMaybeMessage<HistogramProto>(nullptr);
  }

  HistogramProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramProto& from);
  void MergeFrom(const HistogramProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HistogramProto";
  }
  protected:
  explicit HistogramProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 3,
    kKeyFieldNumber = 1,
    kNumBucketsFieldNumber = 2,
  };
  // repeated int64 buckets = 3;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buckets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_buckets() const;
  void _internal_add_buckets(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_buckets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 buckets(int index) const;
  void set_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_buckets(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      buckets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_buckets();

  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required int64 num_buckets = 2;
  bool has_num_buckets() const;
  private:
  bool _internal_has_num_buckets() const;
  public:
  void clear_num_buckets();
  ::PROTOBUF_NAMESPACE_ID::int64 num_buckets() const;
  void set_num_buckets(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_buckets() const;
  void _internal_set_num_buckets(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:HistogramProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > buckets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_buckets_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class LatencyProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LatencyProto) */ {
 public:
  inline LatencyProto() : LatencyProto(nullptr) {}
  virtual ~LatencyProto();
  explicit constexpr LatencyProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyProto(const LatencyProto& from);
  LatencyProto(LatencyProto&& from) noexcept
    : LatencyProto() {
    *this = ::std::move(from);
  }

  inline LatencyProto& operator=(const LatencyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyProto& operator=(LatencyProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatencyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyProto* internal_default_instance() {
    return reinterpret_cast<const LatencyProto*>(
               &_LatencyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LatencyProto& a, LatencyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyProto* New() const final {
    return CreateMaybeMessage<LatencyProto>(nullptr);
  }

  LatencyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatencyProto& from);
  void MergeFrom(const LatencyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LatencyProto";
  }
  protected:
  explicit LatencyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatenciesFieldNumber = 3,
    kKeyFieldNumber = 1,
    kNumStagesFieldNumber = 2,
  };
  // repeated int64 latencies = 3;
  int latencies_size() const;
  private:
  int _internal_latencies_size() const;
  public:
  void clear_latencies();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_latencies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_latencies() const;
  void _internal_add_latencies(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_latencies();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 latencies(int index) const;
  void set_latencies(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_latencies(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      latencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_latencies();

  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required int64 num_stages = 2;
  bool has_num_stages() const;
  private:
  bool _internal_has_num_stages() const;
  public:
  void clear_num_stages();
  ::PROTOBUF_NAMESPACE_ID::int64 num_stages() const;
  void set_num_stages(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_stages() const;
  void _internal_set_num_stages(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LatencyProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > latencies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_stages_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryGeneralMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TelemetryGeneralMetric) */ {
 public:
  inline TelemetryGeneralMetric() : TelemetryGeneralMetric(nullptr) {}
  virtual ~TelemetryGeneralMetric();
  explicit constexpr TelemetryGeneralMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryGeneralMetric(const TelemetryGeneralMetric& from);
  TelemetryGeneralMetric(TelemetryGeneralMetric&& from) noexcept
    : TelemetryGeneralMetric() {
    *this = ::std::move(from);
  }

  inline TelemetryGeneralMetric& operator=(const TelemetryGeneralMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryGeneralMetric& operator=(TelemetryGeneralMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TelemetryGeneralMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryGeneralMetric* internal_default_instance() {
    return reinterpret_cast<const TelemetryGeneralMetric*>(
               &_TelemetryGeneralMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TelemetryGeneralMetric& a, TelemetryGeneralMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryGeneralMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryGeneralMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryGeneralMetric* New() const final {
    return CreateMaybeMessage<TelemetryGeneralMetric>(nullptr);
  }

  TelemetryGeneralMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryGeneralMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TelemetryGeneralMetric& from);
  void MergeFrom(const TelemetryGeneralMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryGeneralMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TelemetryGeneralMetric";
  }
  protected:
  explicit TelemetryGeneralMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // required int32 value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TelemetryGeneralMetric)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// -------------------------------------------------------------------

class WbtProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WbtProto) */ {
 public:
  inline WbtProto() : WbtProto(nullptr) {}
  virtual ~WbtProto();
  explicit constexpr WbtProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WbtProto(const WbtProto& from);
  WbtProto(WbtProto&& from) noexcept
    : WbtProto() {
    *this = ::std::move(from);
  }

  inline WbtProto& operator=(const WbtProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WbtProto& operator=(WbtProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WbtProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WbtProto* internal_default_instance() {
    return reinterpret_cast<const WbtProto*>(
               &_WbtProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WbtProto& a, WbtProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WbtProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WbtProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WbtProto* New() const final {
    return CreateMaybeMessage<WbtProto>(nullptr);
  }

  WbtProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WbtProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WbtProto& from);
  void MergeFrom(const WbtProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WbtProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WbtProto";
  }
  protected:
  explicit WbtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_telemetry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:WbtProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishRequest

// optional .InfluxStorageProto influx = 2;
inline bool PublishRequest::_internal_has_influx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || influx_ != nullptr);
  return value;
}
inline bool PublishRequest::has_influx() const {
  return _internal_has_influx();
}
inline void PublishRequest::clear_influx() {
  if (influx_ != nullptr) influx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::InfluxStorageProto& PublishRequest::_internal_influx() const {
  const ::InfluxStorageProto* p = influx_;
  return p != nullptr ? *p : reinterpret_cast<const ::InfluxStorageProto&>(
      ::_InfluxStorageProto_default_instance_);
}
inline const ::InfluxStorageProto& PublishRequest::influx() const {
  // @@protoc_insertion_point(field_get:PublishRequest.influx)
  return _internal_influx();
}
inline void PublishRequest::unsafe_arena_set_allocated_influx(
    ::InfluxStorageProto* influx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(influx_);
  }
  influx_ = influx;
  if (influx) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.influx)
}
inline ::InfluxStorageProto* PublishRequest::release_influx() {
  _has_bits_[0] &= ~0x00000001u;
  ::InfluxStorageProto* temp = influx_;
  influx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InfluxStorageProto* PublishRequest::unsafe_arena_release_influx() {
  // @@protoc_insertion_point(field_release:PublishRequest.influx)
  _has_bits_[0] &= ~0x00000001u;
  ::InfluxStorageProto* temp = influx_;
  influx_ = nullptr;
  return temp;
}
inline ::InfluxStorageProto* PublishRequest::_internal_mutable_influx() {
  _has_bits_[0] |= 0x00000001u;
  if (influx_ == nullptr) {
    auto* p = CreateMaybeMessage<::InfluxStorageProto>(GetArena());
    influx_ = p;
  }
  return influx_;
}
inline ::InfluxStorageProto* PublishRequest::mutable_influx() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.influx)
  return _internal_mutable_influx();
}
inline void PublishRequest::set_allocated_influx(::InfluxStorageProto* influx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete influx_;
  }
  if (influx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(influx);
    if (message_arena != submessage_arena) {
      influx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, influx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  influx_ = influx;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.influx)
}

// optional .CounterProto counters = 3;
inline bool PublishRequest::_internal_has_counters() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || counters_ != nullptr);
  return value;
}
inline bool PublishRequest::has_counters() const {
  return _internal_has_counters();
}
inline void PublishRequest::clear_counters() {
  if (counters_ != nullptr) counters_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CounterProto& PublishRequest::_internal_counters() const {
  const ::CounterProto* p = counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::CounterProto&>(
      ::_CounterProto_default_instance_);
}
inline const ::CounterProto& PublishRequest::counters() const {
  // @@protoc_insertion_point(field_get:PublishRequest.counters)
  return _internal_counters();
}
inline void PublishRequest::unsafe_arena_set_allocated_counters(
    ::CounterProto* counters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counters_);
  }
  counters_ = counters;
  if (counters) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.counters)
}
inline ::CounterProto* PublishRequest::release_counters() {
  _has_bits_[0] &= ~0x00000002u;
  ::CounterProto* temp = counters_;
  counters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CounterProto* PublishRequest::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:PublishRequest.counters)
  _has_bits_[0] &= ~0x00000002u;
  ::CounterProto* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::CounterProto* PublishRequest::_internal_mutable_counters() {
  _has_bits_[0] |= 0x00000002u;
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::CounterProto>(GetArena());
    counters_ = p;
  }
  return counters_;
}
inline ::CounterProto* PublishRequest::mutable_counters() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.counters)
  return _internal_mutable_counters();
}
inline void PublishRequest::set_allocated_counters(::CounterProto* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.counters)
}

// optional .GaugeProto gauges = 4;
inline bool PublishRequest::_internal_has_gauges() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gauges_ != nullptr);
  return value;
}
inline bool PublishRequest::has_gauges() const {
  return _internal_has_gauges();
}
inline void PublishRequest::clear_gauges() {
  if (gauges_ != nullptr) gauges_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::GaugeProto& PublishRequest::_internal_gauges() const {
  const ::GaugeProto* p = gauges_;
  return p != nullptr ? *p : reinterpret_cast<const ::GaugeProto&>(
      ::_GaugeProto_default_instance_);
}
inline const ::GaugeProto& PublishRequest::gauges() const {
  // @@protoc_insertion_point(field_get:PublishRequest.gauges)
  return _internal_gauges();
}
inline void PublishRequest::unsafe_arena_set_allocated_gauges(
    ::GaugeProto* gauges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gauges_);
  }
  gauges_ = gauges;
  if (gauges) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.gauges)
}
inline ::GaugeProto* PublishRequest::release_gauges() {
  _has_bits_[0] &= ~0x00000004u;
  ::GaugeProto* temp = gauges_;
  gauges_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GaugeProto* PublishRequest::unsafe_arena_release_gauges() {
  // @@protoc_insertion_point(field_release:PublishRequest.gauges)
  _has_bits_[0] &= ~0x00000004u;
  ::GaugeProto* temp = gauges_;
  gauges_ = nullptr;
  return temp;
}
inline ::GaugeProto* PublishRequest::_internal_mutable_gauges() {
  _has_bits_[0] |= 0x00000004u;
  if (gauges_ == nullptr) {
    auto* p = CreateMaybeMessage<::GaugeProto>(GetArena());
    gauges_ = p;
  }
  return gauges_;
}
inline ::GaugeProto* PublishRequest::mutable_gauges() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.gauges)
  return _internal_mutable_gauges();
}
inline void PublishRequest::set_allocated_gauges(::GaugeProto* gauges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gauges_;
  }
  if (gauges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gauges);
    if (message_arena != submessage_arena) {
      gauges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauges, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gauges_ = gauges;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.gauges)
}

// optional .HistogramProto histograms = 5;
inline bool PublishRequest::_internal_has_histograms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || histograms_ != nullptr);
  return value;
}
inline bool PublishRequest::has_histograms() const {
  return _internal_has_histograms();
}
inline void PublishRequest::clear_histograms() {
  if (histograms_ != nullptr) histograms_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::HistogramProto& PublishRequest::_internal_histograms() const {
  const ::HistogramProto* p = histograms_;
  return p != nullptr ? *p : reinterpret_cast<const ::HistogramProto&>(
      ::_HistogramProto_default_instance_);
}
inline const ::HistogramProto& PublishRequest::histograms() const {
  // @@protoc_insertion_point(field_get:PublishRequest.histograms)
  return _internal_histograms();
}
inline void PublishRequest::unsafe_arena_set_allocated_histograms(
    ::HistogramProto* histograms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histograms_);
  }
  histograms_ = histograms;
  if (histograms) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.histograms)
}
inline ::HistogramProto* PublishRequest::release_histograms() {
  _has_bits_[0] &= ~0x00000008u;
  ::HistogramProto* temp = histograms_;
  histograms_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::HistogramProto* PublishRequest::unsafe_arena_release_histograms() {
  // @@protoc_insertion_point(field_release:PublishRequest.histograms)
  _has_bits_[0] &= ~0x00000008u;
  ::HistogramProto* temp = histograms_;
  histograms_ = nullptr;
  return temp;
}
inline ::HistogramProto* PublishRequest::_internal_mutable_histograms() {
  _has_bits_[0] |= 0x00000008u;
  if (histograms_ == nullptr) {
    auto* p = CreateMaybeMessage<::HistogramProto>(GetArena());
    histograms_ = p;
  }
  return histograms_;
}
inline ::HistogramProto* PublishRequest::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.histograms)
  return _internal_mutable_histograms();
}
inline void PublishRequest::set_allocated_histograms(::HistogramProto* histograms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete histograms_;
  }
  if (histograms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histograms);
    if (message_arena != submessage_arena) {
      histograms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histograms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  histograms_ = histograms;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.histograms)
}

// optional .LatencyProto latencies = 6;
inline bool PublishRequest::_internal_has_latencies() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || latencies_ != nullptr);
  return value;
}
inline bool PublishRequest::has_latencies() const {
  return _internal_has_latencies();
}
inline void PublishRequest::clear_latencies() {
  if (latencies_ != nullptr) latencies_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::LatencyProto& PublishRequest::_internal_latencies() const {
  const ::LatencyProto* p = latencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::LatencyProto&>(
      ::_LatencyProto_default_instance_);
}
inline const ::LatencyProto& PublishRequest::latencies() const {
  // @@protoc_insertion_point(field_get:PublishRequest.latencies)
  return _internal_latencies();
}
inline void PublishRequest::unsafe_arena_set_allocated_latencies(
    ::LatencyProto* latencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latencies_);
  }
  latencies_ = latencies;
  if (latencies) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.latencies)
}
inline ::LatencyProto* PublishRequest::release_latencies() {
  _has_bits_[0] &= ~0x00000010u;
  ::LatencyProto* temp = latencies_;
  latencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LatencyProto* PublishRequest::unsafe_arena_release_latencies() {
  // @@protoc_insertion_point(field_release:PublishRequest.latencies)
  _has_bits_[0] &= ~0x00000010u;
  ::LatencyProto* temp = latencies_;
  latencies_ = nullptr;
  return temp;
}
inline ::LatencyProto* PublishRequest::_internal_mutable_latencies() {
  _has_bits_[0] |= 0x00000010u;
  if (latencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::LatencyProto>(GetArena());
    latencies_ = p;
  }
  return latencies_;
}
inline ::LatencyProto* PublishRequest::mutable_latencies() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.latencies)
  return _internal_mutable_latencies();
}
inline void PublishRequest::set_allocated_latencies(::LatencyProto* latencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latencies_;
  }
  if (latencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latencies);
    if (message_arena != submessage_arena) {
      latencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  latencies_ = latencies;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.latencies)
}

// optional .TelemetryGeneralMetric generalMetric = 7;
inline bool PublishRequest::_internal_has_generalmetric() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || generalmetric_ != nullptr);
  return value;
}
inline bool PublishRequest::has_generalmetric() const {
  return _internal_has_generalmetric();
}
inline void PublishRequest::clear_generalmetric() {
  if (generalmetric_ != nullptr) generalmetric_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TelemetryGeneralMetric& PublishRequest::_internal_generalmetric() const {
  const ::TelemetryGeneralMetric* p = generalmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::TelemetryGeneralMetric&>(
      ::_TelemetryGeneralMetric_default_instance_);
}
inline const ::TelemetryGeneralMetric& PublishRequest::generalmetric() const {
  // @@protoc_insertion_point(field_get:PublishRequest.generalMetric)
  return _internal_generalmetric();
}
inline void PublishRequest::unsafe_arena_set_allocated_generalmetric(
    ::TelemetryGeneralMetric* generalmetric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generalmetric_);
  }
  generalmetric_ = generalmetric;
  if (generalmetric) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.generalMetric)
}
inline ::TelemetryGeneralMetric* PublishRequest::release_generalmetric() {
  _has_bits_[0] &= ~0x00000020u;
  ::TelemetryGeneralMetric* temp = generalmetric_;
  generalmetric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TelemetryGeneralMetric* PublishRequest::unsafe_arena_release_generalmetric() {
  // @@protoc_insertion_point(field_release:PublishRequest.generalMetric)
  _has_bits_[0] &= ~0x00000020u;
  ::TelemetryGeneralMetric* temp = generalmetric_;
  generalmetric_ = nullptr;
  return temp;
}
inline ::TelemetryGeneralMetric* PublishRequest::_internal_mutable_generalmetric() {
  _has_bits_[0] |= 0x00000020u;
  if (generalmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::TelemetryGeneralMetric>(GetArena());
    generalmetric_ = p;
  }
  return generalmetric_;
}
inline ::TelemetryGeneralMetric* PublishRequest::mutable_generalmetric() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.generalMetric)
  return _internal_mutable_generalmetric();
}
inline void PublishRequest::set_allocated_generalmetric(::TelemetryGeneralMetric* generalmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete generalmetric_;
  }
  if (generalmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generalmetric);
    if (message_arena != submessage_arena) {
      generalmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalmetric, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  generalmetric_ = generalmetric;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.generalMetric)
}

// optional .WbtProto wbtProto = 8;
inline bool PublishRequest::_internal_has_wbtproto() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || wbtproto_ != nullptr);
  return value;
}
inline bool PublishRequest::has_wbtproto() const {
  return _internal_has_wbtproto();
}
inline void PublishRequest::clear_wbtproto() {
  if (wbtproto_ != nullptr) wbtproto_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::WbtProto& PublishRequest::_internal_wbtproto() const {
  const ::WbtProto* p = wbtproto_;
  return p != nullptr ? *p : reinterpret_cast<const ::WbtProto&>(
      ::_WbtProto_default_instance_);
}
inline const ::WbtProto& PublishRequest::wbtproto() const {
  // @@protoc_insertion_point(field_get:PublishRequest.wbtProto)
  return _internal_wbtproto();
}
inline void PublishRequest::unsafe_arena_set_allocated_wbtproto(
    ::WbtProto* wbtproto) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wbtproto_);
  }
  wbtproto_ = wbtproto;
  if (wbtproto) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishRequest.wbtProto)
}
inline ::WbtProto* PublishRequest::release_wbtproto() {
  _has_bits_[0] &= ~0x00000040u;
  ::WbtProto* temp = wbtproto_;
  wbtproto_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WbtProto* PublishRequest::unsafe_arena_release_wbtproto() {
  // @@protoc_insertion_point(field_release:PublishRequest.wbtProto)
  _has_bits_[0] &= ~0x00000040u;
  ::WbtProto* temp = wbtproto_;
  wbtproto_ = nullptr;
  return temp;
}
inline ::WbtProto* PublishRequest::_internal_mutable_wbtproto() {
  _has_bits_[0] |= 0x00000040u;
  if (wbtproto_ == nullptr) {
    auto* p = CreateMaybeMessage<::WbtProto>(GetArena());
    wbtproto_ = p;
  }
  return wbtproto_;
}
inline ::WbtProto* PublishRequest::mutable_wbtproto() {
  // @@protoc_insertion_point(field_mutable:PublishRequest.wbtProto)
  return _internal_mutable_wbtproto();
}
inline void PublishRequest::set_allocated_wbtproto(::WbtProto* wbtproto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wbtproto_;
  }
  if (wbtproto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wbtproto);
    if (message_arena != submessage_arena) {
      wbtproto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wbtproto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  wbtproto_ = wbtproto;
  // @@protoc_insertion_point(field_set_allocated:PublishRequest.wbtProto)
}

// -------------------------------------------------------------------

// PublishResponse

// required bool successful = 1;
inline bool PublishResponse::_internal_has_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishResponse::has_successful() const {
  return _internal_has_successful();
}
inline void PublishResponse::clear_successful() {
  successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PublishResponse::_internal_successful() const {
  return successful_;
}
inline bool PublishResponse::successful() const {
  // @@protoc_insertion_point(field_get:PublishResponse.successful)
  return _internal_successful();
}
inline void PublishResponse::_internal_set_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  successful_ = value;
}
inline void PublishResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:PublishResponse.successful)
}

// optional string reason = 2;
inline bool PublishResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishResponse::has_reason() const {
  return _internal_has_reason();
}
inline void PublishResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishResponse::reason() const {
  // @@protoc_insertion_point(field_get:PublishResponse.reason)
  return _internal_reason();
}
inline void PublishResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:PublishResponse.reason)
}
inline std::string* PublishResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:PublishResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& PublishResponse::_internal_reason() const {
  return reason_.Get();
}
inline void PublishResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishResponse.reason)
}
inline void PublishResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishResponse.reason)
}
inline void PublishResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishResponse.reason)
}
inline std::string* PublishResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishResponse::release_reason() {
  // @@protoc_insertion_point(field_release:PublishResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishResponse.reason)
}

// -------------------------------------------------------------------

// CollectRequest

// -------------------------------------------------------------------

// CollectResponse

// required .ConfigureMetadataRequest metadata = 1;
inline bool CollectResponse::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool CollectResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void CollectResponse::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ConfigureMetadataRequest& CollectResponse::_internal_metadata() const {
  const ::ConfigureMetadataRequest* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConfigureMetadataRequest&>(
      ::_ConfigureMetadataRequest_default_instance_);
}
inline const ::ConfigureMetadataRequest& CollectResponse::metadata() const {
  // @@protoc_insertion_point(field_get:CollectResponse.metadata)
  return _internal_metadata();
}
inline void CollectResponse::unsafe_arena_set_allocated_metadata(
    ::ConfigureMetadataRequest* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CollectResponse.metadata)
}
inline ::ConfigureMetadataRequest* CollectResponse::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::ConfigureMetadataRequest* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConfigureMetadataRequest* CollectResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:CollectResponse.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::ConfigureMetadataRequest* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::ConfigureMetadataRequest* CollectResponse::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConfigureMetadataRequest>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::ConfigureMetadataRequest* CollectResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:CollectResponse.metadata)
  return _internal_mutable_metadata();
}
inline void CollectResponse::set_allocated_metadata(::ConfigureMetadataRequest* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:CollectResponse.metadata)
}

// repeated .InfluxStorageProto influx = 2;
inline int CollectResponse::_internal_influx_size() const {
  return influx_.size();
}
inline int CollectResponse::influx_size() const {
  return _internal_influx_size();
}
inline void CollectResponse::clear_influx() {
  influx_.Clear();
}
inline ::InfluxStorageProto* CollectResponse::mutable_influx(int index) {
  // @@protoc_insertion_point(field_mutable:CollectResponse.influx)
  return influx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto >*
CollectResponse::mutable_influx() {
  // @@protoc_insertion_point(field_mutable_list:CollectResponse.influx)
  return &influx_;
}
inline const ::InfluxStorageProto& CollectResponse::_internal_influx(int index) const {
  return influx_.Get(index);
}
inline const ::InfluxStorageProto& CollectResponse::influx(int index) const {
  // @@protoc_insertion_point(field_get:CollectResponse.influx)
  return _internal_influx(index);
}
inline ::InfluxStorageProto* CollectResponse::_internal_add_influx() {
  return influx_.Add();
}
inline ::InfluxStorageProto* CollectResponse::add_influx() {
  // @@protoc_insertion_point(field_add:CollectResponse.influx)
  return _internal_add_influx();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto >&
CollectResponse::influx() const {
  // @@protoc_insertion_point(field_list:CollectResponse.influx)
  return influx_;
}

// repeated .CounterProto counters = 3;
inline int CollectResponse::_internal_counters_size() const {
  return counters_.size();
}
inline int CollectResponse::counters_size() const {
  return _internal_counters_size();
}
inline void CollectResponse::clear_counters() {
  counters_.Clear();
}
inline ::CounterProto* CollectResponse::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:CollectResponse.counters)
  return counters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CounterProto >*
CollectResponse::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:CollectResponse.counters)
  return &counters_;
}
inline const ::CounterProto& CollectResponse::_internal_counters(int index) const {
  return counters_.Get(index);
}
inline const ::CounterProto& CollectResponse::counters(int index) const {
  // @@protoc_insertion_point(field_get:CollectResponse.counters)
  return _internal_counters(index);
}
inline ::CounterProto* CollectResponse::_internal_add_counters() {
  return counters_.Add();
}
inline ::CounterProto* CollectResponse::add_counters() {
  // @@protoc_insertion_point(field_add:CollectResponse.counters)
  return _internal_add_counters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CounterProto >&
CollectResponse::counters() const {
  // @@protoc_insertion_point(field_list:CollectResponse.counters)
  return counters_;
}

// repeated .GaugeProto gauges = 4;
inline int CollectResponse::_internal_gauges_size() const {
  return gauges_.size();
}
inline int CollectResponse::gauges_size() const {
  return _internal_gauges_size();
}
inline void CollectResponse::clear_gauges() {
  gauges_.Clear();
}
inline ::GaugeProto* CollectResponse::mutable_gauges(int index) {
  // @@protoc_insertion_point(field_mutable:CollectResponse.gauges)
  return gauges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GaugeProto >*
CollectResponse::mutable_gauges() {
  // @@protoc_insertion_point(field_mutable_list:CollectResponse.gauges)
  return &gauges_;
}
inline const ::GaugeProto& CollectResponse::_internal_gauges(int index) const {
  return gauges_.Get(index);
}
inline const ::GaugeProto& CollectResponse::gauges(int index) const {
  // @@protoc_insertion_point(field_get:CollectResponse.gauges)
  return _internal_gauges(index);
}
inline ::GaugeProto* CollectResponse::_internal_add_gauges() {
  return gauges_.Add();
}
inline ::GaugeProto* CollectResponse::add_gauges() {
  // @@protoc_insertion_point(field_add:CollectResponse.gauges)
  return _internal_add_gauges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GaugeProto >&
CollectResponse::gauges() const {
  // @@protoc_insertion_point(field_list:CollectResponse.gauges)
  return gauges_;
}

// repeated .HistogramProto histograms = 5;
inline int CollectResponse::_internal_histograms_size() const {
  return histograms_.size();
}
inline int CollectResponse::histograms_size() const {
  return _internal_histograms_size();
}
inline void CollectResponse::clear_histograms() {
  histograms_.Clear();
}
inline ::HistogramProto* CollectResponse::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:CollectResponse.histograms)
  return histograms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramProto >*
CollectResponse::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:CollectResponse.histograms)
  return &histograms_;
}
inline const ::HistogramProto& CollectResponse::_internal_histograms(int index) const {
  return histograms_.Get(index);
}
inline const ::HistogramProto& CollectResponse::histograms(int index) const {
  // @@protoc_insertion_point(field_get:CollectResponse.histograms)
  return _internal_histograms(index);
}
inline ::HistogramProto* CollectResponse::_internal_add_histograms() {
  return histograms_.Add();
}
inline ::HistogramProto* CollectResponse::add_histograms() {
  // @@protoc_insertion_point(field_add:CollectResponse.histograms)
  return _internal_add_histograms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HistogramProto >&
CollectResponse::histograms() const {
  // @@protoc_insertion_point(field_list:CollectResponse.histograms)
  return histograms_;
}

// repeated .LatencyProto latencies = 6;
inline int CollectResponse::_internal_latencies_size() const {
  return latencies_.size();
}
inline int CollectResponse::latencies_size() const {
  return _internal_latencies_size();
}
inline void CollectResponse::clear_latencies() {
  latencies_.Clear();
}
inline ::LatencyProto* CollectResponse::mutable_latencies(int index) {
  // @@protoc_insertion_point(field_mutable:CollectResponse.latencies)
  return latencies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LatencyProto >*
CollectResponse::mutable_latencies() {
  // @@protoc_insertion_point(field_mutable_list:CollectResponse.latencies)
  return &latencies_;
}
inline const ::LatencyProto& CollectResponse::_internal_latencies(int index) const {
  return latencies_.Get(index);
}
inline const ::LatencyProto& CollectResponse::latencies(int index) const {
  // @@protoc_insertion_point(field_get:CollectResponse.latencies)
  return _internal_latencies(index);
}
inline ::LatencyProto* CollectResponse::_internal_add_latencies() {
  return latencies_.Add();
}
inline ::LatencyProto* CollectResponse::add_latencies() {
  // @@protoc_insertion_point(field_add:CollectResponse.latencies)
  return _internal_add_latencies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LatencyProto >&
CollectResponse::latencies() const {
  // @@protoc_insertion_point(field_list:CollectResponse.latencies)
  return latencies_;
}

// optional .TelemetryGeneralMetric generalMetric = 7;
inline bool CollectResponse::_internal_has_generalmetric() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || generalmetric_ != nullptr);
  return value;
}
inline bool CollectResponse::has_generalmetric() const {
  return _internal_has_generalmetric();
}
inline void CollectResponse::clear_generalmetric() {
  if (generalmetric_ != nullptr) generalmetric_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TelemetryGeneralMetric& CollectResponse::_internal_generalmetric() const {
  const ::TelemetryGeneralMetric* p = generalmetric_;
  return p != nullptr ? *p : reinterpret_cast<const ::TelemetryGeneralMetric&>(
      ::_TelemetryGeneralMetric_default_instance_);
}
inline const ::TelemetryGeneralMetric& CollectResponse::generalmetric() const {
  // @@protoc_insertion_point(field_get:CollectResponse.generalMetric)
  return _internal_generalmetric();
}
inline void CollectResponse::unsafe_arena_set_allocated_generalmetric(
    ::TelemetryGeneralMetric* generalmetric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generalmetric_);
  }
  generalmetric_ = generalmetric;
  if (generalmetric) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CollectResponse.generalMetric)
}
inline ::TelemetryGeneralMetric* CollectResponse::release_generalmetric() {
  _has_bits_[0] &= ~0x00000002u;
  ::TelemetryGeneralMetric* temp = generalmetric_;
  generalmetric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TelemetryGeneralMetric* CollectResponse::unsafe_arena_release_generalmetric() {
  // @@protoc_insertion_point(field_release:CollectResponse.generalMetric)
  _has_bits_[0] &= ~0x00000002u;
  ::TelemetryGeneralMetric* temp = generalmetric_;
  generalmetric_ = nullptr;
  return temp;
}
inline ::TelemetryGeneralMetric* CollectResponse::_internal_mutable_generalmetric() {
  _has_bits_[0] |= 0x00000002u;
  if (generalmetric_ == nullptr) {
    auto* p = CreateMaybeMessage<::TelemetryGeneralMetric>(GetArena());
    generalmetric_ = p;
  }
  return generalmetric_;
}
inline ::TelemetryGeneralMetric* CollectResponse::mutable_generalmetric() {
  // @@protoc_insertion_point(field_mutable:CollectResponse.generalMetric)
  return _internal_mutable_generalmetric();
}
inline void CollectResponse::set_allocated_generalmetric(::TelemetryGeneralMetric* generalmetric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete generalmetric_;
  }
  if (generalmetric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generalmetric);
    if (message_arena != submessage_arena) {
      generalmetric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalmetric, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  generalmetric_ = generalmetric;
  // @@protoc_insertion_point(field_set_allocated:CollectResponse.generalMetric)
}

// optional .WbtProto wbtProto = 8;
inline bool CollectResponse::_internal_has_wbtproto() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || wbtproto_ != nullptr);
  return value;
}
inline bool CollectResponse::has_wbtproto() const {
  return _internal_has_wbtproto();
}
inline void CollectResponse::clear_wbtproto() {
  if (wbtproto_ != nullptr) wbtproto_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::WbtProto& CollectResponse::_internal_wbtproto() const {
  const ::WbtProto* p = wbtproto_;
  return p != nullptr ? *p : reinterpret_cast<const ::WbtProto&>(
      ::_WbtProto_default_instance_);
}
inline const ::WbtProto& CollectResponse::wbtproto() const {
  // @@protoc_insertion_point(field_get:CollectResponse.wbtProto)
  return _internal_wbtproto();
}
inline void CollectResponse::unsafe_arena_set_allocated_wbtproto(
    ::WbtProto* wbtproto) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wbtproto_);
  }
  wbtproto_ = wbtproto;
  if (wbtproto) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CollectResponse.wbtProto)
}
inline ::WbtProto* CollectResponse::release_wbtproto() {
  _has_bits_[0] &= ~0x00000004u;
  ::WbtProto* temp = wbtproto_;
  wbtproto_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WbtProto* CollectResponse::unsafe_arena_release_wbtproto() {
  // @@protoc_insertion_point(field_release:CollectResponse.wbtProto)
  _has_bits_[0] &= ~0x00000004u;
  ::WbtProto* temp = wbtproto_;
  wbtproto_ = nullptr;
  return temp;
}
inline ::WbtProto* CollectResponse::_internal_mutable_wbtproto() {
  _has_bits_[0] |= 0x00000004u;
  if (wbtproto_ == nullptr) {
    auto* p = CreateMaybeMessage<::WbtProto>(GetArena());
    wbtproto_ = p;
  }
  return wbtproto_;
}
inline ::WbtProto* CollectResponse::mutable_wbtproto() {
  // @@protoc_insertion_point(field_mutable:CollectResponse.wbtProto)
  return _internal_mutable_wbtproto();
}
inline void CollectResponse::set_allocated_wbtproto(::WbtProto* wbtproto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wbtproto_;
  }
  if (wbtproto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wbtproto);
    if (message_arena != submessage_arena) {
      wbtproto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wbtproto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wbtproto_ = wbtproto;
  // @@protoc_insertion_point(field_set_allocated:CollectResponse.wbtProto)
}

// -------------------------------------------------------------------

// EnableRequest

// -------------------------------------------------------------------

// EnableResponse

// required bool successful = 1;
inline bool EnableResponse::_internal_has_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnableResponse::has_successful() const {
  return _internal_has_successful();
}
inline void EnableResponse::clear_successful() {
  successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EnableResponse::_internal_successful() const {
  return successful_;
}
inline bool EnableResponse::successful() const {
  // @@protoc_insertion_point(field_get:EnableResponse.successful)
  return _internal_successful();
}
inline void EnableResponse::_internal_set_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  successful_ = value;
}
inline void EnableResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:EnableResponse.successful)
}

// optional string reason = 2;
inline bool EnableResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnableResponse::has_reason() const {
  return _internal_has_reason();
}
inline void EnableResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnableResponse::reason() const {
  // @@protoc_insertion_point(field_get:EnableResponse.reason)
  return _internal_reason();
}
inline void EnableResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:EnableResponse.reason)
}
inline std::string* EnableResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:EnableResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& EnableResponse::_internal_reason() const {
  return reason_.Get();
}
inline void EnableResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnableResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EnableResponse.reason)
}
inline void EnableResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:EnableResponse.reason)
}
inline void EnableResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EnableResponse.reason)
}
inline std::string* EnableResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnableResponse::release_reason() {
  // @@protoc_insertion_point(field_release:EnableResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnableResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EnableResponse.reason)
}

// -------------------------------------------------------------------

// DisableRequest

// -------------------------------------------------------------------

// DisableResponse

// required bool successful = 1;
inline bool DisableResponse::_internal_has_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisableResponse::has_successful() const {
  return _internal_has_successful();
}
inline void DisableResponse::clear_successful() {
  successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DisableResponse::_internal_successful() const {
  return successful_;
}
inline bool DisableResponse::successful() const {
  // @@protoc_insertion_point(field_get:DisableResponse.successful)
  return _internal_successful();
}
inline void DisableResponse::_internal_set_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  successful_ = value;
}
inline void DisableResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:DisableResponse.successful)
}

// optional string reason = 2;
inline bool DisableResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisableResponse::has_reason() const {
  return _internal_has_reason();
}
inline void DisableResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisableResponse::reason() const {
  // @@protoc_insertion_point(field_get:DisableResponse.reason)
  return _internal_reason();
}
inline void DisableResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:DisableResponse.reason)
}
inline std::string* DisableResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:DisableResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& DisableResponse::_internal_reason() const {
  return reason_.Get();
}
inline void DisableResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DisableResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DisableResponse.reason)
}
inline void DisableResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DisableResponse.reason)
}
inline void DisableResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DisableResponse.reason)
}
inline std::string* DisableResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DisableResponse::release_reason() {
  // @@protoc_insertion_point(field_release:DisableResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisableResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DisableResponse.reason)
}

// -------------------------------------------------------------------

// ConfigureMetadataRequest

// required string git_hash = 1;
inline bool ConfigureMetadataRequest::_internal_has_git_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigureMetadataRequest::has_git_hash() const {
  return _internal_has_git_hash();
}
inline void ConfigureMetadataRequest::clear_git_hash() {
  git_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigureMetadataRequest::git_hash() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataRequest.git_hash)
  return _internal_git_hash();
}
inline void ConfigureMetadataRequest::set_git_hash(const std::string& value) {
  _internal_set_git_hash(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataRequest.git_hash)
}
inline std::string* ConfigureMetadataRequest::mutable_git_hash() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataRequest.git_hash)
  return _internal_mutable_git_hash();
}
inline const std::string& ConfigureMetadataRequest::_internal_git_hash() const {
  return git_hash_.Get();
}
inline void ConfigureMetadataRequest::_internal_set_git_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataRequest::set_git_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  git_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataRequest.git_hash)
}
inline void ConfigureMetadataRequest::set_git_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataRequest.git_hash)
}
inline void ConfigureMetadataRequest::set_git_hash(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  git_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataRequest.git_hash)
}
inline std::string* ConfigureMetadataRequest::_internal_mutable_git_hash() {
  _has_bits_[0] |= 0x00000001u;
  return git_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataRequest::release_git_hash() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataRequest.git_hash)
  if (!_internal_has_git_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return git_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataRequest::set_allocated_git_hash(std::string* git_hash) {
  if (git_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  git_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataRequest.git_hash)
}

// required string host_name = 2;
inline bool ConfigureMetadataRequest::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigureMetadataRequest::has_host_name() const {
  return _internal_has_host_name();
}
inline void ConfigureMetadataRequest::clear_host_name() {
  host_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigureMetadataRequest::host_name() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataRequest.host_name)
  return _internal_host_name();
}
inline void ConfigureMetadataRequest::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataRequest.host_name)
}
inline std::string* ConfigureMetadataRequest::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataRequest.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& ConfigureMetadataRequest::_internal_host_name() const {
  return host_name_.Get();
}
inline void ConfigureMetadataRequest::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataRequest::set_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataRequest.host_name)
}
inline void ConfigureMetadataRequest::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataRequest.host_name)
}
inline void ConfigureMetadataRequest::set_host_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataRequest.host_name)
}
inline std::string* ConfigureMetadataRequest::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000002u;
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataRequest::release_host_name() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataRequest.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return host_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataRequest::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataRequest.host_name)
}

// required string host_type = 3;
inline bool ConfigureMetadataRequest::_internal_has_host_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigureMetadataRequest::has_host_type() const {
  return _internal_has_host_type();
}
inline void ConfigureMetadataRequest::clear_host_type() {
  host_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConfigureMetadataRequest::host_type() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataRequest.host_type)
  return _internal_host_type();
}
inline void ConfigureMetadataRequest::set_host_type(const std::string& value) {
  _internal_set_host_type(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataRequest.host_type)
}
inline std::string* ConfigureMetadataRequest::mutable_host_type() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataRequest.host_type)
  return _internal_mutable_host_type();
}
inline const std::string& ConfigureMetadataRequest::_internal_host_type() const {
  return host_type_.Get();
}
inline void ConfigureMetadataRequest::_internal_set_host_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  host_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataRequest::set_host_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  host_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataRequest.host_type)
}
inline void ConfigureMetadataRequest::set_host_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  host_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataRequest.host_type)
}
inline void ConfigureMetadataRequest::set_host_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  host_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataRequest.host_type)
}
inline std::string* ConfigureMetadataRequest::_internal_mutable_host_type() {
  _has_bits_[0] |= 0x00000004u;
  return host_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataRequest::release_host_type() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataRequest.host_type)
  if (!_internal_has_host_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return host_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataRequest::set_allocated_host_type(std::string* host_type) {
  if (host_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  host_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataRequest.host_type)
}

// required string ip_addr = 4;
inline bool ConfigureMetadataRequest::_internal_has_ip_addr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigureMetadataRequest::has_ip_addr() const {
  return _internal_has_ip_addr();
}
inline void ConfigureMetadataRequest::clear_ip_addr() {
  ip_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConfigureMetadataRequest::ip_addr() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataRequest.ip_addr)
  return _internal_ip_addr();
}
inline void ConfigureMetadataRequest::set_ip_addr(const std::string& value) {
  _internal_set_ip_addr(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataRequest.ip_addr)
}
inline std::string* ConfigureMetadataRequest::mutable_ip_addr() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataRequest.ip_addr)
  return _internal_mutable_ip_addr();
}
inline const std::string& ConfigureMetadataRequest::_internal_ip_addr() const {
  return ip_addr_.Get();
}
inline void ConfigureMetadataRequest::_internal_set_ip_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataRequest::set_ip_addr(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ip_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataRequest.ip_addr)
}
inline void ConfigureMetadataRequest::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataRequest.ip_addr)
}
inline void ConfigureMetadataRequest::set_ip_addr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ip_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataRequest.ip_addr)
}
inline std::string* ConfigureMetadataRequest::_internal_mutable_ip_addr() {
  _has_bits_[0] |= 0x00000008u;
  return ip_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataRequest::release_ip_addr() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataRequest.ip_addr)
  if (!_internal_has_ip_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ip_addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataRequest::set_allocated_ip_addr(std::string* ip_addr) {
  if (ip_addr != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ip_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataRequest.ip_addr)
}

// required string application_name = 5;
inline bool ConfigureMetadataRequest::_internal_has_application_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConfigureMetadataRequest::has_application_name() const {
  return _internal_has_application_name();
}
inline void ConfigureMetadataRequest::clear_application_name() {
  application_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConfigureMetadataRequest::application_name() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataRequest.application_name)
  return _internal_application_name();
}
inline void ConfigureMetadataRequest::set_application_name(const std::string& value) {
  _internal_set_application_name(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataRequest.application_name)
}
inline std::string* ConfigureMetadataRequest::mutable_application_name() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataRequest.application_name)
  return _internal_mutable_application_name();
}
inline const std::string& ConfigureMetadataRequest::_internal_application_name() const {
  return application_name_.Get();
}
inline void ConfigureMetadataRequest::_internal_set_application_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataRequest::set_application_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  application_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataRequest.application_name)
}
inline void ConfigureMetadataRequest::set_application_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataRequest.application_name)
}
inline void ConfigureMetadataRequest::set_application_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataRequest.application_name)
}
inline std::string* ConfigureMetadataRequest::_internal_mutable_application_name() {
  _has_bits_[0] |= 0x00000010u;
  return application_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataRequest::release_application_name() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataRequest.application_name)
  if (!_internal_has_application_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return application_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataRequest::set_allocated_application_name(std::string* application_name) {
  if (application_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  application_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataRequest.application_name)
}

// -------------------------------------------------------------------

// ConfigureMetadataResponse

// required bool successful = 1;
inline bool ConfigureMetadataResponse::_internal_has_successful() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigureMetadataResponse::has_successful() const {
  return _internal_has_successful();
}
inline void ConfigureMetadataResponse::clear_successful() {
  successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConfigureMetadataResponse::_internal_successful() const {
  return successful_;
}
inline bool ConfigureMetadataResponse::successful() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataResponse.successful)
  return _internal_successful();
}
inline void ConfigureMetadataResponse::_internal_set_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  successful_ = value;
}
inline void ConfigureMetadataResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataResponse.successful)
}

// required int32 collect_latency_ms = 2;
inline bool ConfigureMetadataResponse::_internal_has_collect_latency_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigureMetadataResponse::has_collect_latency_ms() const {
  return _internal_has_collect_latency_ms();
}
inline void ConfigureMetadataResponse::clear_collect_latency_ms() {
  collect_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigureMetadataResponse::_internal_collect_latency_ms() const {
  return collect_latency_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigureMetadataResponse::collect_latency_ms() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataResponse.collect_latency_ms)
  return _internal_collect_latency_ms();
}
inline void ConfigureMetadataResponse::_internal_set_collect_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  collect_latency_ms_ = value;
}
inline void ConfigureMetadataResponse::set_collect_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_collect_latency_ms(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataResponse.collect_latency_ms)
}

// optional string reason = 3;
inline bool ConfigureMetadataResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigureMetadataResponse::has_reason() const {
  return _internal_has_reason();
}
inline void ConfigureMetadataResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigureMetadataResponse::reason() const {
  // @@protoc_insertion_point(field_get:ConfigureMetadataResponse.reason)
  return _internal_reason();
}
inline void ConfigureMetadataResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:ConfigureMetadataResponse.reason)
}
inline std::string* ConfigureMetadataResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:ConfigureMetadataResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& ConfigureMetadataResponse::_internal_reason() const {
  return reason_.Get();
}
inline void ConfigureMetadataResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigureMetadataResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigureMetadataResponse.reason)
}
inline void ConfigureMetadataResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigureMetadataResponse.reason)
}
inline void ConfigureMetadataResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigureMetadataResponse.reason)
}
inline std::string* ConfigureMetadataResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigureMetadataResponse::release_reason() {
  // @@protoc_insertion_point(field_release:ConfigureMetadataResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureMetadataResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigureMetadataResponse.reason)
}

// -------------------------------------------------------------------

// InfluxStorageProto_Tag

// required string tag_name = 1;
inline bool InfluxStorageProto_Tag::_internal_has_tag_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfluxStorageProto_Tag::has_tag_name() const {
  return _internal_has_tag_name();
}
inline void InfluxStorageProto_Tag::clear_tag_name() {
  tag_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfluxStorageProto_Tag::tag_name() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.Tag.tag_name)
  return _internal_tag_name();
}
inline void InfluxStorageProto_Tag::set_tag_name(const std::string& value) {
  _internal_set_tag_name(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.Tag.tag_name)
}
inline std::string* InfluxStorageProto_Tag::mutable_tag_name() {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.Tag.tag_name)
  return _internal_mutable_tag_name();
}
inline const std::string& InfluxStorageProto_Tag::_internal_tag_name() const {
  return tag_name_.Get();
}
inline void InfluxStorageProto_Tag::_internal_set_tag_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InfluxStorageProto_Tag::set_tag_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InfluxStorageProto.Tag.tag_name)
}
inline void InfluxStorageProto_Tag::set_tag_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:InfluxStorageProto.Tag.tag_name)
}
inline void InfluxStorageProto_Tag::set_tag_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InfluxStorageProto.Tag.tag_name)
}
inline std::string* InfluxStorageProto_Tag::_internal_mutable_tag_name() {
  _has_bits_[0] |= 0x00000001u;
  return tag_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InfluxStorageProto_Tag::release_tag_name() {
  // @@protoc_insertion_point(field_release:InfluxStorageProto.Tag.tag_name)
  if (!_internal_has_tag_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfluxStorageProto_Tag::set_allocated_tag_name(std::string* tag_name) {
  if (tag_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InfluxStorageProto.Tag.tag_name)
}

// required string tag_value = 2;
inline bool InfluxStorageProto_Tag::_internal_has_tag_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InfluxStorageProto_Tag::has_tag_value() const {
  return _internal_has_tag_value();
}
inline void InfluxStorageProto_Tag::clear_tag_value() {
  tag_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InfluxStorageProto_Tag::tag_value() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.Tag.tag_value)
  return _internal_tag_value();
}
inline void InfluxStorageProto_Tag::set_tag_value(const std::string& value) {
  _internal_set_tag_value(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.Tag.tag_value)
}
inline std::string* InfluxStorageProto_Tag::mutable_tag_value() {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.Tag.tag_value)
  return _internal_mutable_tag_value();
}
inline const std::string& InfluxStorageProto_Tag::_internal_tag_value() const {
  return tag_value_.Get();
}
inline void InfluxStorageProto_Tag::_internal_set_tag_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InfluxStorageProto_Tag::set_tag_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InfluxStorageProto.Tag.tag_value)
}
inline void InfluxStorageProto_Tag::set_tag_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tag_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:InfluxStorageProto.Tag.tag_value)
}
inline void InfluxStorageProto_Tag::set_tag_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tag_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InfluxStorageProto.Tag.tag_value)
}
inline std::string* InfluxStorageProto_Tag::_internal_mutable_tag_value() {
  _has_bits_[0] |= 0x00000002u;
  return tag_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InfluxStorageProto_Tag::release_tag_value() {
  // @@protoc_insertion_point(field_release:InfluxStorageProto.Tag.tag_value)
  if (!_internal_has_tag_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tag_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfluxStorageProto_Tag::set_allocated_tag_value(std::string* tag_value) {
  if (tag_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InfluxStorageProto.Tag.tag_value)
}

// -------------------------------------------------------------------

// InfluxStorageProto_Field

// required string field_name = 1;
inline bool InfluxStorageProto_Field::_internal_has_field_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfluxStorageProto_Field::has_field_name() const {
  return _internal_has_field_name();
}
inline void InfluxStorageProto_Field::clear_field_name() {
  field_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfluxStorageProto_Field::field_name() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.Field.field_name)
  return _internal_field_name();
}
inline void InfluxStorageProto_Field::set_field_name(const std::string& value) {
  _internal_set_field_name(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.Field.field_name)
}
inline std::string* InfluxStorageProto_Field::mutable_field_name() {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.Field.field_name)
  return _internal_mutable_field_name();
}
inline const std::string& InfluxStorageProto_Field::_internal_field_name() const {
  return field_name_.Get();
}
inline void InfluxStorageProto_Field::_internal_set_field_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InfluxStorageProto_Field::set_field_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InfluxStorageProto.Field.field_name)
}
inline void InfluxStorageProto_Field::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:InfluxStorageProto.Field.field_name)
}
inline void InfluxStorageProto_Field::set_field_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InfluxStorageProto.Field.field_name)
}
inline std::string* InfluxStorageProto_Field::_internal_mutable_field_name() {
  _has_bits_[0] |= 0x00000001u;
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InfluxStorageProto_Field::release_field_name() {
  // @@protoc_insertion_point(field_release:InfluxStorageProto.Field.field_name)
  if (!_internal_has_field_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfluxStorageProto_Field::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InfluxStorageProto.Field.field_name)
}

// required string field_value = 2;
inline bool InfluxStorageProto_Field::_internal_has_field_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InfluxStorageProto_Field::has_field_value() const {
  return _internal_has_field_value();
}
inline void InfluxStorageProto_Field::clear_field_value() {
  field_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InfluxStorageProto_Field::field_value() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.Field.field_value)
  return _internal_field_value();
}
inline void InfluxStorageProto_Field::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.Field.field_value)
}
inline std::string* InfluxStorageProto_Field::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.Field.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& InfluxStorageProto_Field::_internal_field_value() const {
  return field_value_.Get();
}
inline void InfluxStorageProto_Field::_internal_set_field_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InfluxStorageProto_Field::set_field_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  field_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InfluxStorageProto.Field.field_value)
}
inline void InfluxStorageProto_Field::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:InfluxStorageProto.Field.field_value)
}
inline void InfluxStorageProto_Field::set_field_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InfluxStorageProto.Field.field_value)
}
inline std::string* InfluxStorageProto_Field::_internal_mutable_field_value() {
  _has_bits_[0] |= 0x00000002u;
  return field_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InfluxStorageProto_Field::release_field_value() {
  // @@protoc_insertion_point(field_release:InfluxStorageProto.Field.field_value)
  if (!_internal_has_field_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return field_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfluxStorageProto_Field::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InfluxStorageProto.Field.field_value)
}

// -------------------------------------------------------------------

// InfluxStorageProto

// required string measurement = 1;
inline bool InfluxStorageProto::_internal_has_measurement() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfluxStorageProto::has_measurement() const {
  return _internal_has_measurement();
}
inline void InfluxStorageProto::clear_measurement() {
  measurement_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfluxStorageProto::measurement() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.measurement)
  return _internal_measurement();
}
inline void InfluxStorageProto::set_measurement(const std::string& value) {
  _internal_set_measurement(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.measurement)
}
inline std::string* InfluxStorageProto::mutable_measurement() {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.measurement)
  return _internal_mutable_measurement();
}
inline const std::string& InfluxStorageProto::_internal_measurement() const {
  return measurement_.Get();
}
inline void InfluxStorageProto::_internal_set_measurement(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  measurement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InfluxStorageProto::set_measurement(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  measurement_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InfluxStorageProto.measurement)
}
inline void InfluxStorageProto::set_measurement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  measurement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:InfluxStorageProto.measurement)
}
inline void InfluxStorageProto::set_measurement(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  measurement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InfluxStorageProto.measurement)
}
inline std::string* InfluxStorageProto::_internal_mutable_measurement() {
  _has_bits_[0] |= 0x00000001u;
  return measurement_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InfluxStorageProto::release_measurement() {
  // @@protoc_insertion_point(field_release:InfluxStorageProto.measurement)
  if (!_internal_has_measurement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return measurement_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InfluxStorageProto::set_allocated_measurement(std::string* measurement) {
  if (measurement != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  measurement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), measurement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InfluxStorageProto.measurement)
}

// repeated .InfluxStorageProto.Tag tags = 2;
inline int InfluxStorageProto::_internal_tags_size() const {
  return tags_.size();
}
inline int InfluxStorageProto::tags_size() const {
  return _internal_tags_size();
}
inline void InfluxStorageProto::clear_tags() {
  tags_.Clear();
}
inline ::InfluxStorageProto_Tag* InfluxStorageProto::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Tag >*
InfluxStorageProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:InfluxStorageProto.tags)
  return &tags_;
}
inline const ::InfluxStorageProto_Tag& InfluxStorageProto::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::InfluxStorageProto_Tag& InfluxStorageProto::tags(int index) const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.tags)
  return _internal_tags(index);
}
inline ::InfluxStorageProto_Tag* InfluxStorageProto::_internal_add_tags() {
  return tags_.Add();
}
inline ::InfluxStorageProto_Tag* InfluxStorageProto::add_tags() {
  // @@protoc_insertion_point(field_add:InfluxStorageProto.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Tag >&
InfluxStorageProto::tags() const {
  // @@protoc_insertion_point(field_list:InfluxStorageProto.tags)
  return tags_;
}

// repeated .InfluxStorageProto.Field fields = 3;
inline int InfluxStorageProto::_internal_fields_size() const {
  return fields_.size();
}
inline int InfluxStorageProto::fields_size() const {
  return _internal_fields_size();
}
inline void InfluxStorageProto::clear_fields() {
  fields_.Clear();
}
inline ::InfluxStorageProto_Field* InfluxStorageProto::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:InfluxStorageProto.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Field >*
InfluxStorageProto::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:InfluxStorageProto.fields)
  return &fields_;
}
inline const ::InfluxStorageProto_Field& InfluxStorageProto::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::InfluxStorageProto_Field& InfluxStorageProto::fields(int index) const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.fields)
  return _internal_fields(index);
}
inline ::InfluxStorageProto_Field* InfluxStorageProto::_internal_add_fields() {
  return fields_.Add();
}
inline ::InfluxStorageProto_Field* InfluxStorageProto::add_fields() {
  // @@protoc_insertion_point(field_add:InfluxStorageProto.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfluxStorageProto_Field >&
InfluxStorageProto::fields() const {
  // @@protoc_insertion_point(field_list:InfluxStorageProto.fields)
  return fields_;
}

// optional int64 timestamp = 4;
inline bool InfluxStorageProto::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InfluxStorageProto::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void InfluxStorageProto::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InfluxStorageProto::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InfluxStorageProto::timestamp() const {
  // @@protoc_insertion_point(field_get:InfluxStorageProto.timestamp)
  return _internal_timestamp();
}
inline void InfluxStorageProto::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void InfluxStorageProto::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:InfluxStorageProto.timestamp)
}

// -------------------------------------------------------------------

// CounterProto

// required string key = 1;
inline bool CounterProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CounterProto::has_key() const {
  return _internal_has_key();
}
inline void CounterProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CounterProto::key() const {
  // @@protoc_insertion_point(field_get:CounterProto.key)
  return _internal_key();
}
inline void CounterProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:CounterProto.key)
}
inline std::string* CounterProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:CounterProto.key)
  return _internal_mutable_key();
}
inline const std::string& CounterProto::_internal_key() const {
  return key_.Get();
}
inline void CounterProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CounterProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CounterProto.key)
}
inline void CounterProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CounterProto.key)
}
inline void CounterProto::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CounterProto.key)
}
inline std::string* CounterProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CounterProto::release_key() {
  // @@protoc_insertion_point(field_release:CounterProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CounterProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CounterProto.key)
}

// required int64 value = 2;
inline bool CounterProto::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CounterProto::has_value() const {
  return _internal_has_value();
}
inline void CounterProto::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CounterProto::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CounterProto::value() const {
  // @@protoc_insertion_point(field_get:CounterProto.value)
  return _internal_value();
}
inline void CounterProto::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void CounterProto::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CounterProto.value)
}

// -------------------------------------------------------------------

// GaugeProto

// required string key = 1;
inline bool GaugeProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GaugeProto::has_key() const {
  return _internal_has_key();
}
inline void GaugeProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GaugeProto::key() const {
  // @@protoc_insertion_point(field_get:GaugeProto.key)
  return _internal_key();
}
inline void GaugeProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:GaugeProto.key)
}
inline std::string* GaugeProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:GaugeProto.key)
  return _internal_mutable_key();
}
inline const std::string& GaugeProto::_internal_key() const {
  return key_.Get();
}
inline void GaugeProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GaugeProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GaugeProto.key)
}
inline void GaugeProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GaugeProto.key)
}
inline void GaugeProto::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GaugeProto.key)
}
inline std::string* GaugeProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GaugeProto::release_key() {
  // @@protoc_insertion_point(field_release:GaugeProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GaugeProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GaugeProto.key)
}

// required int64 value = 2;
inline bool GaugeProto::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GaugeProto::has_value() const {
  return _internal_has_value();
}
inline void GaugeProto::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeProto::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeProto::value() const {
  // @@protoc_insertion_point(field_get:GaugeProto.value)
  return _internal_value();
}
inline void GaugeProto::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void GaugeProto::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:GaugeProto.value)
}

// -------------------------------------------------------------------

// HistogramProto

// required string key = 1;
inline bool HistogramProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistogramProto::has_key() const {
  return _internal_has_key();
}
inline void HistogramProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistogramProto::key() const {
  // @@protoc_insertion_point(field_get:HistogramProto.key)
  return _internal_key();
}
inline void HistogramProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:HistogramProto.key)
}
inline std::string* HistogramProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:HistogramProto.key)
  return _internal_mutable_key();
}
inline const std::string& HistogramProto::_internal_key() const {
  return key_.Get();
}
inline void HistogramProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistogramProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HistogramProto.key)
}
inline void HistogramProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HistogramProto.key)
}
inline void HistogramProto::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HistogramProto.key)
}
inline std::string* HistogramProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistogramProto::release_key() {
  // @@protoc_insertion_point(field_release:HistogramProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistogramProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HistogramProto.key)
}

// required int64 num_buckets = 2;
inline bool HistogramProto::_internal_has_num_buckets() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistogramProto::has_num_buckets() const {
  return _internal_has_num_buckets();
}
inline void HistogramProto::clear_num_buckets() {
  num_buckets_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramProto::_internal_num_buckets() const {
  return num_buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramProto::num_buckets() const {
  // @@protoc_insertion_point(field_get:HistogramProto.num_buckets)
  return _internal_num_buckets();
}
inline void HistogramProto::_internal_set_num_buckets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  num_buckets_ = value;
}
inline void HistogramProto::set_num_buckets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_buckets(value);
  // @@protoc_insertion_point(field_set:HistogramProto.num_buckets)
}

// repeated int64 buckets = 3;
inline int HistogramProto::_internal_buckets_size() const {
  return buckets_.size();
}
inline int HistogramProto::buckets_size() const {
  return _internal_buckets_size();
}
inline void HistogramProto::clear_buckets() {
  buckets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramProto::_internal_buckets(int index) const {
  return buckets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistogramProto::buckets(int index) const {
  // @@protoc_insertion_point(field_get:HistogramProto.buckets)
  return _internal_buckets(index);
}
inline void HistogramProto::set_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  buckets_.Set(index, value);
  // @@protoc_insertion_point(field_set:HistogramProto.buckets)
}
inline void HistogramProto::_internal_add_buckets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  buckets_.Add(value);
}
inline void HistogramProto::add_buckets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_buckets(value);
  // @@protoc_insertion_point(field_add:HistogramProto.buckets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HistogramProto::_internal_buckets() const {
  return buckets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HistogramProto::buckets() const {
  // @@protoc_insertion_point(field_list:HistogramProto.buckets)
  return _internal_buckets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HistogramProto::_internal_mutable_buckets() {
  return &buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HistogramProto::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:HistogramProto.buckets)
  return _internal_mutable_buckets();
}

// -------------------------------------------------------------------

// LatencyProto

// required string key = 1;
inline bool LatencyProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyProto::has_key() const {
  return _internal_has_key();
}
inline void LatencyProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LatencyProto::key() const {
  // @@protoc_insertion_point(field_get:LatencyProto.key)
  return _internal_key();
}
inline void LatencyProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:LatencyProto.key)
}
inline std::string* LatencyProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:LatencyProto.key)
  return _internal_mutable_key();
}
inline const std::string& LatencyProto::_internal_key() const {
  return key_.Get();
}
inline void LatencyProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LatencyProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LatencyProto.key)
}
inline void LatencyProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LatencyProto.key)
}
inline void LatencyProto::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LatencyProto.key)
}
inline std::string* LatencyProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LatencyProto::release_key() {
  // @@protoc_insertion_point(field_release:LatencyProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LatencyProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LatencyProto.key)
}

// required int64 num_stages = 2;
inline bool LatencyProto::_internal_has_num_stages() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyProto::has_num_stages() const {
  return _internal_has_num_stages();
}
inline void LatencyProto::clear_num_stages() {
  num_stages_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LatencyProto::_internal_num_stages() const {
  return num_stages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LatencyProto::num_stages() const {
  // @@protoc_insertion_point(field_get:LatencyProto.num_stages)
  return _internal_num_stages();
}
inline void LatencyProto::_internal_set_num_stages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  num_stages_ = value;
}
inline void LatencyProto::set_num_stages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_stages(value);
  // @@protoc_insertion_point(field_set:LatencyProto.num_stages)
}

// repeated int64 latencies = 3;
inline int LatencyProto::_internal_latencies_size() const {
  return latencies_.size();
}
inline int LatencyProto::latencies_size() const {
  return _internal_latencies_size();
}
inline void LatencyProto::clear_latencies() {
  latencies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LatencyProto::_internal_latencies(int index) const {
  return latencies_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LatencyProto::latencies(int index) const {
  // @@protoc_insertion_point(field_get:LatencyProto.latencies)
  return _internal_latencies(index);
}
inline void LatencyProto::set_latencies(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  latencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:LatencyProto.latencies)
}
inline void LatencyProto::_internal_add_latencies(::PROTOBUF_NAMESPACE_ID::int64 value) {
  latencies_.Add(value);
}
inline void LatencyProto::add_latencies(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_latencies(value);
  // @@protoc_insertion_point(field_add:LatencyProto.latencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LatencyProto::_internal_latencies() const {
  return latencies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LatencyProto::latencies() const {
  // @@protoc_insertion_point(field_list:LatencyProto.latencies)
  return _internal_latencies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LatencyProto::_internal_mutable_latencies() {
  return &latencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LatencyProto::mutable_latencies() {
  // @@protoc_insertion_point(field_mutable_list:LatencyProto.latencies)
  return _internal_mutable_latencies();
}

// -------------------------------------------------------------------

// TelemetryGeneralMetric

// required string id = 1;
inline bool TelemetryGeneralMetric::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TelemetryGeneralMetric::has_id() const {
  return _internal_has_id();
}
inline void TelemetryGeneralMetric::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TelemetryGeneralMetric::id() const {
  // @@protoc_insertion_point(field_get:TelemetryGeneralMetric.id)
  return _internal_id();
}
inline void TelemetryGeneralMetric::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TelemetryGeneralMetric.id)
}
inline std::string* TelemetryGeneralMetric::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TelemetryGeneralMetric.id)
  return _internal_mutable_id();
}
inline const std::string& TelemetryGeneralMetric::_internal_id() const {
  return id_.Get();
}
inline void TelemetryGeneralMetric::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TelemetryGeneralMetric::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TelemetryGeneralMetric.id)
}
inline void TelemetryGeneralMetric::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TelemetryGeneralMetric.id)
}
inline void TelemetryGeneralMetric::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TelemetryGeneralMetric.id)
}
inline std::string* TelemetryGeneralMetric::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TelemetryGeneralMetric::release_id() {
  // @@protoc_insertion_point(field_release:TelemetryGeneralMetric.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryGeneralMetric::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TelemetryGeneralMetric.id)
}

// required string time = 2;
inline bool TelemetryGeneralMetric::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TelemetryGeneralMetric::has_time() const {
  return _internal_has_time();
}
inline void TelemetryGeneralMetric::clear_time() {
  time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TelemetryGeneralMetric::time() const {
  // @@protoc_insertion_point(field_get:TelemetryGeneralMetric.time)
  return _internal_time();
}
inline void TelemetryGeneralMetric::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TelemetryGeneralMetric.time)
}
inline std::string* TelemetryGeneralMetric::mutable_time() {
  // @@protoc_insertion_point(field_mutable:TelemetryGeneralMetric.time)
  return _internal_mutable_time();
}
inline const std::string& TelemetryGeneralMetric::_internal_time() const {
  return time_.Get();
}
inline void TelemetryGeneralMetric::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TelemetryGeneralMetric::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TelemetryGeneralMetric.time)
}
inline void TelemetryGeneralMetric::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TelemetryGeneralMetric.time)
}
inline void TelemetryGeneralMetric::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TelemetryGeneralMetric.time)
}
inline std::string* TelemetryGeneralMetric::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000002u;
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TelemetryGeneralMetric::release_time() {
  // @@protoc_insertion_point(field_release:TelemetryGeneralMetric.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryGeneralMetric::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TelemetryGeneralMetric.time)
}

// required int32 value = 3;
inline bool TelemetryGeneralMetric::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TelemetryGeneralMetric::has_value() const {
  return _internal_has_value();
}
inline void TelemetryGeneralMetric::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryGeneralMetric::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryGeneralMetric::value() const {
  // @@protoc_insertion_point(field_get:TelemetryGeneralMetric.value)
  return _internal_value();
}
inline void TelemetryGeneralMetric::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void TelemetryGeneralMetric::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TelemetryGeneralMetric.value)
}

// -------------------------------------------------------------------

// WbtProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto
